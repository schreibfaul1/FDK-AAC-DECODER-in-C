

/************************* MPEG-D DRC decoder library **************************

   Author(s):

   Description:

*******************************************************************************/
#include "../libAACdec/newAACDecoder.h"
#include "drcDec_types.h"
#include "drcDec_rom.h"


const int8_t deltaGain_codingProfile_0_1_huffman[24][2] = {
    {1, 2},    {3, 4},     {-63, -65}, {5, -66},   {-64, 6},   {-80, 7},
    {8, 9},    {-68, 10},  {11, 12},   {-56, -67}, {-61, 13},  {-62, -69},
    {14, 15},  {16, -72},  {-71, 17},  {-70, -60}, {18, -59},  {19, 20},
    {21, -79}, {-57, -73}, {22, -58},  {-76, 23},  {-75, -74}, {-78, -77}};

const int8_t deltaGain_codingProfile_2_huffman[48][2] = {
    {1, 2},     {3, 4},     {5, 6},     {7, 8},     {9, 10},    {11, 12},
    {13, -65},  {14, -64},  {15, -66},  {16, -67},  {17, 18},   {19, -68},
    {20, -63},  {-69, 21},  {-59, 22},  {-61, -62}, {-60, 23},  {24, -58},
    {-70, -57}, {-56, -71}, {25, 26},   {27, -55},  {-72, 28},  {-54, 29},
    {-53, 30},  {-73, -52}, {31, -74},  {32, 33},   {-75, 34},  {-76, 35},
    {-51, 36},  {-78, 37},  {-77, 38},  {-96, 39},  {-48, 40},  {-50, -79},
    {41, 42},   {-80, -81}, {-82, 43},  {44, -49},  {45, -84},  {-83, -89},
    {-86, 46},  {-90, -85}, {-91, -93}, {-92, 47},  {-88, -87}, {-95, -94}};

const int16_t slopeSteepness[] = {
    -25000, -10000, -4000, -1600, -640, -256, -41, 0, 41, 256, 640, 1600, 4000, 10000, 25000,
};

const int8_t slopeSteepness_huffman[14][2] = {
    {1, -57},  {-58, 2},   {3, 4},    {5, 6},    {7, -56},
    {8, -60},  {-61, -55}, {9, -59},  {10, -54}, {-64, 11},
    {-51, 12}, {-62, -50}, {-63, 13}, {-52, -53}};

const int32_t downmixCoeff[] = {
    FL2FXCONST_DBL(1.0000000000 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.9440608763 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.8912509381 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.8413951416 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.7943282347 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.7498942093 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.7079457844 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.6683439176 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.6309573445 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5956621435 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5623413252 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5308844442 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5011872336 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.4216965034 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.3548133892 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.0000000000 / (float)(1 << 2))};

const int32_t downmixCoeffV1[] = {
    FL2FXCONST_DBL(3.1622776602 / (float)(1 << 2)),
    FL2FXCONST_DBL(1.9952623150 / (float)(1 << 2)),
    FL2FXCONST_DBL(1.6788040181 / (float)(1 << 2)),
    FL2FXCONST_DBL(1.4125375446 / (float)(1 << 2)),
    FL2FXCONST_DBL(1.1885022274 / (float)(1 << 2)),
    FL2FXCONST_DBL(1.0000000000 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.9440608763 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.8912509381 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.8413951416 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.7943282347 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.7498942093 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.7079457844 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.6683439176 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.6309573445 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5956621435 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5623413252 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5308844442 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.5011872336 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.4731512590 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.4466835922 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.4216965034 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.3981071706 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.3548133892 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.3162277660 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.2818382931 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.2511886432 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.1778279410 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.1000000000 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.0562341325 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.0316227766 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.0100000000 / (float)(1 << 2)),
    FL2FXCONST_DBL(0.0000000000 / (float)(1 << 2))};

const CUSTOM_DRC_CHAR_SIGMOID cicpDrcCharSigmoidLeft[] = {
    {16384, 0,    9216, 0},    /* 1 */
    {16384, 1638, 9216, 0}, /* 2 */
    {16384, 3277, 9216, 0}, /* 3 */
    {16384, 4915, 9216, 0}, /* 4 */
    {16384, 6554, 6144, 0}, /* 5 */
    {16384, 8192, 5120, 0}, /* 6 */
};

const CUSTOM_DRC_CHAR_SIGMOID cicpDrcCharSigmoidRight[] = {
    {-16384, 0,    12288, 0},    /* 1 */
    {-16384, 1638, 12288, 0}, /* 2 */
    {-16384, 3277, 12288, 0}, /* 3 */
    {-16384, 4915, 10240, 0}, /* 4 */
    {-16384, 6554, 8192,  0},  /* 5 */
    {-16384, 8192, 6144,  0},  /* 6 */
};

const CUSTOM_DRC_CHAR_NODES cicpDrcCharNodesLeft[] = {
    {2,
     {
         -7936,
         -10496,
         -13568,
     },
     {
         0,
         0,
         1536,
     }}, /* 7 */
    {1,
     {
         -7936,
         -11008,
     },
     {
         0,
         1536,
     }}, /* 8 */
    {2,
     {
         -7936,
         -10496,
         -16640,
     },
     {
         0,
         0,
         3072,
     }}, /* 9 */
    {1,
     {
         -7936,
         -14080,
     },
     {
         0,
         3072,
     }}, /* 10 */
    {1,
     {
         -7936,
         -12800,
     },
     {
         0,
         3840,
     }} /* 11 */
};

const CUSTOM_DRC_CHAR_NODES cicpDrcCharNodesRight[] = {
    {4,
     {-7936, -5376, -2816, 2304, 4864},
     {
         0,
         0,
         -1280,
         -6144,
         -8704,
     }}, /* 7 */
    {4,
     {
         -7936,
         -6656,
         -4096,
         1024,
         3584,
     },
     {
         0,
         0,
         -1280,
         -6144,
         -8704,
     }}, /* 8 */
    {3,
     {
         -7936,
         -5376,
         2304,
         7424,
     },
     {
         0,
         0,
         -3840,
         -8960,
     }}, /* 9 */
    {4,
     {
         -7936,
         -6656,
         -4096,
         1024,
         3584,
     },
     {
         0,
         0,
         -1280,
         -6144,
         -8704,
     }}, /* 10 */
    {4,
     {
         -7936,
         -6656,
         -4096,
         1024,
         3584,
     },
     {
         0,
         0,
         -1280,
         -6144,
         -8704,
     }} /* 11 */
};
