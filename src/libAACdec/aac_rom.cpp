/**************************** AAC decoder library ******************************

   Author(s):   Josef Hoepfl, Tobias Chalupka

   Description: Definition of constant tables

*******************************************************************************/
#include "aac_rom.h"
#include <stdint.h>

/* Prescale InverseQuantTable by 4 to save
   redundant shifts in invers quantization
 */

#define SCL_TAB(a) (a >> 4)
const int32_t InverseQuantTable[INV_QUANT_TABLESIZE + 1] = {
    SCL_TAB(0x32CBFD40), SCL_TAB(0x330FC340), SCL_TAB(0x33539FC0), SCL_TAB(0x33979280), SCL_TAB(0x33DB9BC0),
    SCL_TAB(0x341FBB80), SCL_TAB(0x3463F180), SCL_TAB(0x34A83DC0), SCL_TAB(0x34ECA000), SCL_TAB(0x35311880),
    SCL_TAB(0x3575A700), SCL_TAB(0x35BA4B80), SCL_TAB(0x35FF0600), SCL_TAB(0x3643D680), SCL_TAB(0x3688BCC0),
    SCL_TAB(0x36CDB880), SCL_TAB(0x3712CA40), SCL_TAB(0x3757F1C0), SCL_TAB(0x379D2F00), SCL_TAB(0x37E28180),
    SCL_TAB(0x3827E9C0), SCL_TAB(0x386D6740), SCL_TAB(0x38B2FA40), SCL_TAB(0x38F8A2C0), SCL_TAB(0x393E6080),
    SCL_TAB(0x39843380), SCL_TAB(0x39CA1BC0), SCL_TAB(0x3A101940), SCL_TAB(0x3A562BC0), SCL_TAB(0x3A9C5340),
    SCL_TAB(0x3AE28FC0), SCL_TAB(0x3B28E180), SCL_TAB(0x3B6F4800), SCL_TAB(0x3BB5C340), SCL_TAB(0x3BFC5380),
    SCL_TAB(0x3C42F880), SCL_TAB(0x3C89B200), SCL_TAB(0x3CD08080), SCL_TAB(0x3D176340), SCL_TAB(0x3D5E5B00),
    SCL_TAB(0x3DA56700), SCL_TAB(0x3DEC87C0), SCL_TAB(0x3E33BCC0), SCL_TAB(0x3E7B0640), SCL_TAB(0x3EC26400),
    SCL_TAB(0x3F09D640), SCL_TAB(0x3F515C80), SCL_TAB(0x3F98F740), SCL_TAB(0x3FE0A600), SCL_TAB(0x40286900),
    SCL_TAB(0x40704000), SCL_TAB(0x40B82B00), SCL_TAB(0x41002A00), SCL_TAB(0x41483D00), SCL_TAB(0x41906400),
    SCL_TAB(0x41D89F00), SCL_TAB(0x4220ED80), SCL_TAB(0x42695000), SCL_TAB(0x42B1C600), SCL_TAB(0x42FA5000),
    SCL_TAB(0x4342ED80), SCL_TAB(0x438B9E80), SCL_TAB(0x43D46380), SCL_TAB(0x441D3B80), SCL_TAB(0x44662780),
    SCL_TAB(0x44AF2680), SCL_TAB(0x44F83900), SCL_TAB(0x45415F00), SCL_TAB(0x458A9880), SCL_TAB(0x45D3E500),
    SCL_TAB(0x461D4500), SCL_TAB(0x4666B800), SCL_TAB(0x46B03E80), SCL_TAB(0x46F9D800), SCL_TAB(0x47438480),
    SCL_TAB(0x478D4400), SCL_TAB(0x47D71680), SCL_TAB(0x4820FC00), SCL_TAB(0x486AF500), SCL_TAB(0x48B50000),
    SCL_TAB(0x48FF1E80), SCL_TAB(0x49494F80), SCL_TAB(0x49939380), SCL_TAB(0x49DDEA80), SCL_TAB(0x4A285400),
    SCL_TAB(0x4A72D000), SCL_TAB(0x4ABD5E80), SCL_TAB(0x4B080000), SCL_TAB(0x4B52B400), SCL_TAB(0x4B9D7A80),
    SCL_TAB(0x4BE85380), SCL_TAB(0x4C333F00), SCL_TAB(0x4C7E3D00), SCL_TAB(0x4CC94D00), SCL_TAB(0x4D146F80),
    SCL_TAB(0x4D5FA500), SCL_TAB(0x4DAAEC00), SCL_TAB(0x4DF64580), SCL_TAB(0x4E41B180), SCL_TAB(0x4E8D2F00),
    SCL_TAB(0x4ED8BF80), SCL_TAB(0x4F246180), SCL_TAB(0x4F701600), SCL_TAB(0x4FBBDC00), SCL_TAB(0x5007B480),
    SCL_TAB(0x50539F00), SCL_TAB(0x509F9B80), SCL_TAB(0x50EBA980), SCL_TAB(0x5137C980), SCL_TAB(0x5183FB80),
    SCL_TAB(0x51D03F80), SCL_TAB(0x521C9500), SCL_TAB(0x5268FC80), SCL_TAB(0x52B57580), SCL_TAB(0x53020000),
    SCL_TAB(0x534E9C80), SCL_TAB(0x539B4A80), SCL_TAB(0x53E80A80), SCL_TAB(0x5434DB80), SCL_TAB(0x5481BE80),
    SCL_TAB(0x54CEB280), SCL_TAB(0x551BB880), SCL_TAB(0x5568CF80), SCL_TAB(0x55B5F800), SCL_TAB(0x56033200),
    SCL_TAB(0x56507D80), SCL_TAB(0x569DDA00), SCL_TAB(0x56EB4800), SCL_TAB(0x5738C700), SCL_TAB(0x57865780),
    SCL_TAB(0x57D3F900), SCL_TAB(0x5821AC00), SCL_TAB(0x586F7000), SCL_TAB(0x58BD4500), SCL_TAB(0x590B2B00),
    SCL_TAB(0x59592200), SCL_TAB(0x59A72A80), SCL_TAB(0x59F54380), SCL_TAB(0x5A436D80), SCL_TAB(0x5A91A900),
    SCL_TAB(0x5ADFF500), SCL_TAB(0x5B2E5180), SCL_TAB(0x5B7CBF80), SCL_TAB(0x5BCB3E00), SCL_TAB(0x5C19CD00),
    SCL_TAB(0x5C686D80), SCL_TAB(0x5CB71E00), SCL_TAB(0x5D05DF80), SCL_TAB(0x5D54B200), SCL_TAB(0x5DA39500),
    SCL_TAB(0x5DF28880), SCL_TAB(0x5E418C80), SCL_TAB(0x5E90A100), SCL_TAB(0x5EDFC680), SCL_TAB(0x5F2EFC00),
    SCL_TAB(0x5F7E4280), SCL_TAB(0x5FCD9900), SCL_TAB(0x601D0080), SCL_TAB(0x606C7800), SCL_TAB(0x60BC0000),
    SCL_TAB(0x610B9800), SCL_TAB(0x615B4100), SCL_TAB(0x61AAF980), SCL_TAB(0x61FAC300), SCL_TAB(0x624A9C80),
    SCL_TAB(0x629A8600), SCL_TAB(0x62EA8000), SCL_TAB(0x633A8A00), SCL_TAB(0x638AA480), SCL_TAB(0x63DACF00),
    SCL_TAB(0x642B0980), SCL_TAB(0x647B5400), SCL_TAB(0x64CBAE80), SCL_TAB(0x651C1900), SCL_TAB(0x656C9400),
    SCL_TAB(0x65BD1E80), SCL_TAB(0x660DB900), SCL_TAB(0x665E6380), SCL_TAB(0x66AF1E00), SCL_TAB(0x66FFE880),
    SCL_TAB(0x6750C280), SCL_TAB(0x67A1AC80), SCL_TAB(0x67F2A600), SCL_TAB(0x6843B000), SCL_TAB(0x6894C900),
    SCL_TAB(0x68E5F200), SCL_TAB(0x69372B00), SCL_TAB(0x69887380), SCL_TAB(0x69D9CB80), SCL_TAB(0x6A2B3300),
    SCL_TAB(0x6A7CAA80), SCL_TAB(0x6ACE3180), SCL_TAB(0x6B1FC800), SCL_TAB(0x6B716E00), SCL_TAB(0x6BC32400),
    SCL_TAB(0x6C14E900), SCL_TAB(0x6C66BD80), SCL_TAB(0x6CB8A180), SCL_TAB(0x6D0A9500), SCL_TAB(0x6D5C9800),
    SCL_TAB(0x6DAEAA00), SCL_TAB(0x6E00CB80), SCL_TAB(0x6E52FC80), SCL_TAB(0x6EA53D00), SCL_TAB(0x6EF78C80),
    SCL_TAB(0x6F49EB80), SCL_TAB(0x6F9C5980), SCL_TAB(0x6FEED700), SCL_TAB(0x70416380), SCL_TAB(0x7093FF00),
    SCL_TAB(0x70E6AA00), SCL_TAB(0x71396400), SCL_TAB(0x718C2D00), SCL_TAB(0x71DF0580), SCL_TAB(0x7231ED00),
    SCL_TAB(0x7284E300), SCL_TAB(0x72D7E880), SCL_TAB(0x732AFD00), SCL_TAB(0x737E2080), SCL_TAB(0x73D15300),
    SCL_TAB(0x74249480), SCL_TAB(0x7477E480), SCL_TAB(0x74CB4400), SCL_TAB(0x751EB200), SCL_TAB(0x75722F00),
    SCL_TAB(0x75C5BB00), SCL_TAB(0x76195580), SCL_TAB(0x766CFF00), SCL_TAB(0x76C0B700), SCL_TAB(0x77147E00),
    SCL_TAB(0x77685400), SCL_TAB(0x77BC3880), SCL_TAB(0x78102B80), SCL_TAB(0x78642D80), SCL_TAB(0x78B83E00),
    SCL_TAB(0x790C5D00), SCL_TAB(0x79608B00), SCL_TAB(0x79B4C780), SCL_TAB(0x7A091280), SCL_TAB(0x7A5D6C00),
    SCL_TAB(0x7AB1D400), SCL_TAB(0x7B064A80), SCL_TAB(0x7B5ACF80), SCL_TAB(0x7BAF6380), SCL_TAB(0x7C040580),
    SCL_TAB(0x7C58B600), SCL_TAB(0x7CAD7500), SCL_TAB(0x7D024200), SCL_TAB(0x7D571E00), SCL_TAB(0x7DAC0800),
    SCL_TAB(0x7E010080), SCL_TAB(0x7E560780), SCL_TAB(0x7EAB1C80), SCL_TAB(0x7F004000), SCL_TAB(0x7F557200),
    SCL_TAB(0x7FAAB200), SCL_TAB(0x7FFFFFFF)};

/**
 * \brief Table representing scale factor gains. Given a scale factor sf, and a
 * value pSpec[i] the gain is given by: MantissaTable[sf % 4][msb] = 2^(sf % 4)
 * / (1<<ExponentTable[sf % 4][msb] The second dimension "msb" represents the
 * upper scale factor bit count floor(log2(scalefactor >> 2)) The corresponding
 * exponents for the values in this tables are stored in ExponentTable[sf %
 * 4][msb] below.
 */
const int32_t MantissaTable[4][14] = {
    {0x40000000, 0x50A28C00, 0x6597FA80, 0x40000000, 0x50A28C00, 0x6597FA80, 0x40000000, 0x50A28C00, 0x6597FA80,
     0x40000000, 0x50A28C00, 0x6597FA80, 0x40000000, 0x50A28C00},
    {0x4C1BF800, 0x5FE44380, 0x78D0DF80, 0x4C1BF800, 0x5FE44380, 0x78D0DF80, 0x4C1BF800, 0x5FE44380, 0x78D0DF80,
     0x4C1BF800, 0x5FE44380, 0x78D0DF80, 0x4C1BF800, 0x5FE44380},
    {0x5A827980, 0x7208F800, 0x47D66B00, 0x5A827980, 0x7208F800, 0x47D66B00, 0x5A827980, 0x7208F800, 0x47D66B00,
     0x5A827980, 0x7208F800, 0x47D66B00, 0x5A827980, 0x7208F800},
    {0x6BA27E80, 0x43CE3E80, 0x556E0400, 0x6BA27E80, 0x43CE3E80, 0x556E0400, 0x6BA27E80, 0x43CE3E80, 0x556E0400,
     0x6BA27E80, 0x43CE3E80, 0x556E0400, 0x6BA27E80, 0x43CE3E80}};

const int8_t ExponentTable[4][14] = {{1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18},
                                     {1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18},
                                     {1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18},
                                     {1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19}};

/* 41 scfbands */
static const int16_t sfb_96_1024[42] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,  52,
                                        56,  64,  72,  80,  88,  96,  108, 120, 132, 144, 156, 172, 188, 212,
                                        240, 276, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024};
/* 12 scfbands */
static const int16_t sfb_96_128[13] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128};

/* 47 scfbands*/
static const int16_t sfb_64_1024[48] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,
                                        48,  52,  56,  64,  72,  80,  88,  100, 112, 124, 140, 156,
                                        172, 192, 216, 240, 268, 304, 344, 384, 424, 464, 504, 544,
                                        584, 624, 664, 704, 744, 784, 824, 864, 904, 944, 984, 1024};

/* 12 scfbands */
static const int16_t sfb_64_128[13] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128};

/* 49 scfbands */
static const int16_t sfb_48_1024[50] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,
                                        64,  72,  80,  88,  96,  108, 120, 132, 144, 160, 176, 196, 216,
                                        240, 264, 292, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608,
                                        640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 1024};
/* 14 scfbands */
static const int16_t sfb_48_128[15] = {0, 4, 8, 12, 16, 20, 28, 36, 44, 56, 68, 80, 96, 112, 128};

/* 51 scfbands */
static const int16_t sfb_32_1024[52] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,
                                        64,  72,  80,  88,  96,  108, 120, 132, 144, 160, 176, 196, 216,
                                        240, 264, 292, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608,
                                        640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024};

/* 47 scfbands */
static const int16_t sfb_24_1024[48] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,
                                        52,  60,  68,  76,  84,  92,  100, 108, 116, 124, 136, 148,
                                        160, 172, 188, 204, 220, 240, 260, 284, 308, 336, 364, 396,
                                        432, 468, 508, 552, 600, 652, 704, 768, 832, 896, 960, 1024};

/* 15 scfbands */
static const int16_t sfb_24_128[16] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 64, 76, 92, 108, 128};

/* 43 scfbands */
static const int16_t sfb_16_1024[44] = {0,   8,   16,  24,  32,  40,  48,  56,  64,  72,  80,  88,  100, 112, 124,
                                        136, 148, 160, 172, 184, 196, 212, 228, 244, 260, 280, 300, 320, 344, 368,
                                        396, 424, 456, 492, 532, 572, 616, 664, 716, 772, 832, 896, 960, 1024};

/* 15 scfbands */
static const int16_t sfb_16_128[16] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48, 60, 72, 88, 108, 128};

/* 40 scfbands */
static const int16_t sfb_8_1024[41] = {0,   12,  24,  36,  48,  60,  72,  84,  96,  108, 120, 132, 144, 156,
                                       172, 188, 204, 220, 236, 252, 268, 288, 308, 328, 348, 372, 396, 420,
                                       448, 476, 508, 544, 580, 620, 664, 712, 764, 820, 880, 944, 1024};

/* 15 scfbands */
static const int16_t sfb_8_128[16] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 60, 72, 88, 108, 128};

static const int16_t
    sfb_96_960[42] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,  52,
                      56,  64,  72,  80,  88,  96,  108, 120, 132, 144, 156, 172, 188, 212,
                      240, 276, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960}; /* 40 scfbands */

static const int16_t sfb_96_120[13] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 120}; /* 12 scfbands */

static const int16_t sfb_64_960[47] = {
    0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,  52,  56,  64,
    72,  80,  88,  100, 112, 124, 140, 156, 172, 192, 216, 240, 268, 304, 344, 384,
    424, 464, 504, 544, 584, 624, 664, 704, 744, 784, 824, 864, 904, 944, 960}; /* 46 scfbands */

static const int16_t sfb_64_120[13] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 120}; /* 12 scfbands */

static const int16_t sfb_48_960[50] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,
                                       64,  72,  80,  88,  96,  108, 120, 132, 144, 160, 176, 196, 216,
                                       240, 264, 292, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608,
                                       640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960};     /* 49 scfbands */
static const int16_t sfb_48_120[15] = {0, 4, 8, 12, 16, 20, 28, 36, 44, 56, 68, 80, 96, 112, 120}; /* 14 scfbands */

static const int16_t sfb_32_960[50] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,
                                       64,  72,  80,  88,  96,  108, 120, 132, 144, 160, 176, 196, 216,
                                       240, 264, 292, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608,
                                       640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960}; /* 49 scfbands */

static const int16_t sfb_24_960[47] = {
    0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  52,  60,  68,  76,
    84,  92,  100, 108, 116, 124, 136, 148, 160, 172, 188, 204, 220, 240, 260, 284,
    308, 336, 364, 396, 432, 468, 508, 552, 600, 652, 704, 768, 832, 896, 960}; /* 46 scfbands */

static const int16_t sfb_24_120[16] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 64, 76, 92, 108, 120}; /* 15 scfbands */

static const int16_t
    sfb_16_960[43] = {0,   8,   16,  24,  32,  40,  48,  56,  64,  72,  80,  88,  100, 112, 124,
                      136, 148, 160, 172, 184, 196, 212, 228, 244, 260, 280, 300, 320, 344, 368,
                      396, 424, 456, 492, 532, 572, 616, 664, 716, 772, 832, 896, 960}; /* 42 scfbands */

static const int16_t sfb_16_120[16] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48, 60, 72, 88, 108, 120}; /* 15 scfbands */

static const int16_t
    sfb_8_960[41] = {0,   12,  24,  36,  48,  60,  72,  84,  96,  108, 120, 132, 144, 156,
                     172, 188, 204, 220, 236, 252, 268, 288, 308, 328, 348, 372, 396, 420,
                     448, 476, 508, 544, 580, 620, 664, 712, 764, 820, 880, 944, 960}; /* 40 scfbands */

static const int16_t sfb_8_120[16] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 60, 72, 88, 108, 120}; /* 15 scfbands */

static const int16_t sfb_96_768[] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,
                                     52,  56,  64,  72,  80,  88,  96,  108, 120, 132, 144, 156, 172,
                                     188, 212, 240, 276, 320, 384, 448, 512, 576, 640, 704, 768}; /* 37 scfbands */
static const int16_t sfb_96_96[] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 96};             /* 12 scfbands */

static const int16_t sfb_64_768[] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,  52,  56,
                                     64,  72,  80,  88,  100, 112, 124, 140, 156, 172, 192, 216, 240, 268, 304,
                                     344, 384, 424, 464, 504, 544, 584, 624, 664, 704, 744, 768}; /* 41 scfbands */

static const int16_t sfb_64_96[] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 96}; /* 12 scfbands */

static const int16_t
    sfb_48_768[] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,  64,  72,
                    80,  88,  96,  108, 120, 132, 144, 160, 176, 196, 216, 240, 264, 292, 320,
                    352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768}; /* 43 scfbands */

static const int16_t sfb_48_96[] = {0, 4, 8, 12, 16, 20, 28, 36, 44, 56, 68, 80, 96}; /* 12 scfbands */

static const int16_t
    sfb_32_768[] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,  64,  72,
                    80,  88,  96,  108, 120, 132, 144, 160, 176, 196, 216, 240, 264, 292, 320,
                    352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768}; /* 43 scfbands */

static const int16_t
    sfb_24_768[] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  52,  60,  68,
                    76,  84,  92,  100, 108, 116, 124, 136, 148, 160, 172, 188, 204, 220, 240,
                    260, 284, 308, 336, 364, 396, 432, 468, 508, 552, 600, 652, 704, 768}; /* 43 scfbands */

static const int16_t sfb_24_96[] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 64, 76, 92, 96}; /* 14 scfbands */

static const int16_t sfb_16_768[] = {0,   8,   16,  24,  32,  40,  48,  56,  64,  72,  80,  88,  100, 112,
                                     124, 136, 148, 160, 172, 184, 196, 212, 228, 244, 260, 280, 300, 320,
                                     344, 368, 396, 424, 456, 492, 532, 572, 616, 664, 716, 768}; /* 39 scfbands */

static const int16_t sfb_16_96[] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48, 60, 72, 88, 96}; /* 14 scfbands */

static const int16_t sfb_8_768[] = {0,   12,  24,  36,  48,  60,  72,  84,  96,  108, 120, 132, 144,
                                    156, 172, 188, 204, 220, 236, 252, 268, 288, 308, 328, 348, 372,
                                    396, 420, 448, 476, 508, 544, 580, 620, 664, 712, 764, 768}; /* 37 scfbands */

static const int16_t sfb_8_96[] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 60, 72, 88, 96}; /* 14 scfbands */

static const int16_t sfb_48_512[37] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,
                                       52,  56,  60,  68,  76,  84,  92,  100, 112, 124, 136, 148, 164,
                                       184, 208, 236, 268, 300, 332, 364, 396, 428, 460, 512}; /* 36 scfbands */
static const int16_t sfb_32_512[38] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,
                                       52,  56,  64,  72,  80,  88,  96,  108, 120, 132, 144, 160, 176,
                                       192, 212, 236, 260, 288, 320, 352, 384, 416, 448, 480, 512}; /* 37 scfbands */
static const int16_t sfb_24_512[32] = {
    0,  4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  52,  60,  68,  80,
    92, 104, 120, 140, 164, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512}; /* 31 scfbands */

static const int16_t sfb_48_480[36] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,
                                       48,  52,  56,  64,  72,  80,  88,  96,  108, 120, 132, 144,
                                       156, 172, 188, 212, 240, 272, 304, 336, 368, 400, 432, 480}; /* 35 scfbands */
static const int16_t sfb_32_480[38] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,
                                       52,  56,  60,  64,  72,  80,  88,  96,  104, 112, 124, 136, 148,
                                       164, 180, 200, 224, 256, 288, 320, 352, 384, 416, 448, 480}; /* 37 scfbands */
static const int16_t sfb_24_480[31] = {
    0,  4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  52,  60,  68, 80,
    92, 104, 120, 140, 164, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480}; /* 30 scfbands */

const SFB_INFO sfbOffsetTables[5][16] = {{
                                             {sfb_96_1024, sfb_96_128, 41, 12},
                                             {sfb_96_1024, sfb_96_128, 41, 12},
                                             {sfb_64_1024, sfb_64_128, 47, 12},
                                             {sfb_48_1024, sfb_48_128, 49, 14},
                                             {sfb_48_1024, sfb_48_128, 49, 14},
                                             {sfb_32_1024, sfb_48_128, 51, 14},
                                             {sfb_24_1024, sfb_24_128, 47, 15},
                                             {sfb_24_1024, sfb_24_128, 47, 15},
                                             {sfb_16_1024, sfb_16_128, 43, 15},
                                             {sfb_16_1024, sfb_16_128, 43, 15},
                                             {sfb_16_1024, sfb_16_128, 43, 15},
                                             {sfb_8_1024, sfb_8_128, 40, 15},
                                             {sfb_8_1024, sfb_8_128, 40, 15},
                                         },
                                         {
                                             {sfb_96_960, sfb_96_120, 40, 12},
                                             {sfb_96_960, sfb_96_120, 40, 12},
                                             {sfb_64_960, sfb_64_120, 46, 12},
                                             {sfb_48_960, sfb_48_120, 49, 14},
                                             {sfb_48_960, sfb_48_120, 49, 14},
                                             {sfb_32_960, sfb_48_120, 49, 14},
                                             {sfb_24_960, sfb_24_120, 46, 15},
                                             {sfb_24_960, sfb_24_120, 46, 15},
                                             {sfb_16_960, sfb_16_120, 42, 15},
                                             {sfb_16_960, sfb_16_120, 42, 15},
                                             {sfb_16_960, sfb_16_120, 42, 15},
                                             {sfb_8_960, sfb_8_120, 40, 15},
                                             {sfb_8_960, sfb_8_120, 40, 15},
                                         },
                                         {
                                             {sfb_96_768, sfb_96_96, 37, 12},
                                             {sfb_96_768, sfb_96_96, 37, 12},
                                             {sfb_64_768, sfb_64_96, 41, 12},
                                             {sfb_48_768, sfb_48_96, 43, 12},
                                             {sfb_48_768, sfb_48_96, 43, 12},
                                             {sfb_32_768, sfb_48_96, 43, 12},
                                             {sfb_24_768, sfb_24_96, 43, 14},
                                             {sfb_24_768, sfb_24_96, 43, 14},
                                             {sfb_16_768, sfb_16_96, 39, 14},
                                             {sfb_16_768, sfb_16_96, 39, 14},
                                             {sfb_16_768, sfb_16_96, 39, 14},
                                             {sfb_8_768, sfb_8_96, 37, 14},
                                             {sfb_8_768, sfb_8_96, 37, 14},
                                         },
                                         {
                                             {sfb_48_512, NULL, 36, 0},
                                             {sfb_48_512, NULL, 36, 0},
                                             {sfb_48_512, NULL, 36, 0},
                                             {sfb_48_512, NULL, 36, 0},
                                             {sfb_48_512, NULL, 36, 0},
                                             {sfb_32_512, NULL, 37, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                             {sfb_24_512, NULL, 31, 0},
                                         },
                                         {
                                             {sfb_48_480, NULL, 35, 0},
                                             {sfb_48_480, NULL, 35, 0},
                                             {sfb_48_480, NULL, 35, 0},
                                             {sfb_48_480, NULL, 35, 0},
                                             {sfb_48_480, NULL, 35, 0},
                                             {sfb_32_480, NULL, 37, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                             {sfb_24_480, NULL, 30, 0},
                                         }};

/*# don't use 1 bit hufman tables */
/*
  MPEG-2 AAC 2 BITS parallel Hufman Tables

  Bit 0:     = 1=ENDNODE, 0=INDEX
  Bit 1:     = CODEWORD LEN MOD 2
  Bit 2..9:  = VALUE/REF Tables 1..10,SCL
  Bit 2..11: = VALUE/REF Table 11
*/
const uint16_t HuffmanCodeBook_1[51][4] = {
    {0x0157, 0x0157, 0x0004, 0x0018}, {0x0008, 0x000c, 0x0010, 0x0014}, {0x015b, 0x015b, 0x0153, 0x0153},
    {0x0057, 0x0057, 0x0167, 0x0167}, {0x0257, 0x0257, 0x0117, 0x0117}, {0x0197, 0x0197, 0x0147, 0x0147},
    {0x001c, 0x0030, 0x0044, 0x0058}, {0x0020, 0x0024, 0x0028, 0x002c}, {0x014b, 0x014b, 0x0163, 0x0163},
    {0x0217, 0x0217, 0x0127, 0x0127}, {0x0187, 0x0187, 0x0097, 0x0097}, {0x016b, 0x016b, 0x0017, 0x0017},
    {0x0034, 0x0038, 0x003c, 0x0040}, {0x0143, 0x0143, 0x0107, 0x0107}, {0x011b, 0x011b, 0x0067, 0x0067},
    {0x0193, 0x0193, 0x0297, 0x0297}, {0x019b, 0x019b, 0x0247, 0x0247}, {0x0048, 0x004c, 0x0050, 0x0054},
    {0x01a7, 0x01a7, 0x0267, 0x0267}, {0x0113, 0x0113, 0x025b, 0x025b}, {0x0053, 0x0053, 0x005b, 0x005b},
    {0x0253, 0x0253, 0x0047, 0x0047}, {0x005c, 0x0070, 0x0084, 0x0098}, {0x0060, 0x0064, 0x0068, 0x006c},
    {0x012b, 0x012b, 0x0123, 0x0123}, {0x018b, 0x018b, 0x00a7, 0x00a7}, {0x0227, 0x0227, 0x0287, 0x0287},
    {0x0087, 0x0087, 0x010b, 0x010b}, {0x0074, 0x0078, 0x007c, 0x0080}, {0x021b, 0x021b, 0x0027, 0x0027},
    {0x01a3, 0x01a3, 0x0093, 0x0093}, {0x0183, 0x0183, 0x0207, 0x0207}, {0x024b, 0x024b, 0x004b, 0x004b},
    {0x0088, 0x008c, 0x0090, 0x0094}, {0x0063, 0x0063, 0x0103, 0x0103}, {0x0007, 0x0007, 0x02a7, 0x02a7},
    {0x009b, 0x009b, 0x026b, 0x026b}, {0x0263, 0x0263, 0x01ab, 0x01ab}, {0x009c, 0x00a0, 0x00a4, 0x00b8},
    {0x0241, 0x0011, 0x0069, 0x0019}, {0x0211, 0x0041, 0x0291, 0x0299}, {0x00a8, 0x00ac, 0x00b0, 0x00b4},
    {0x008b, 0x008b, 0x0223, 0x0223}, {0x00a3, 0x00a3, 0x020b, 0x020b}, {0x02ab, 0x02ab, 0x0283, 0x0283},
    {0x002b, 0x002b, 0x0083, 0x0083}, {0x00bc, 0x00c0, 0x00c4, 0x00c8}, {0x0003, 0x0003, 0x022b, 0x022b},
    {0x028b, 0x028b, 0x02a3, 0x02a3}, {0x0023, 0x0023, 0x0203, 0x0203}, {0x000b, 0x000b, 0x00ab, 0x00ab}};

const uint16_t HuffmanCodeBook_2[39][4] = {
    {0x0004, 0x000c, 0x0020, 0x0034}, {0x0157, 0x0157, 0x0159, 0x0008}, {0x0153, 0x0153, 0x0257, 0x0257},
    {0x0010, 0x0014, 0x0018, 0x001c}, {0x0117, 0x0117, 0x0057, 0x0057}, {0x0147, 0x0147, 0x0197, 0x0197},
    {0x0167, 0x0167, 0x0185, 0x0161}, {0x0125, 0x0095, 0x0065, 0x0215}, {0x0024, 0x0028, 0x002c, 0x0030},
    {0x0051, 0x0149, 0x0119, 0x0141}, {0x0015, 0x0199, 0x0259, 0x0245}, {0x0191, 0x0265, 0x0105, 0x0251},
    {0x0045, 0x0111, 0x0169, 0x01a5}, {0x0038, 0x0044, 0x0058, 0x006c}, {0x0295, 0x0059, 0x003c, 0x0040},
    {0x0227, 0x0227, 0x021b, 0x021b}, {0x0123, 0x0123, 0x0087, 0x0087}, {0x0048, 0x004c, 0x0050, 0x0054},
    {0x018b, 0x018b, 0x006b, 0x006b}, {0x029b, 0x029b, 0x01a3, 0x01a3}, {0x0207, 0x0207, 0x01ab, 0x01ab},
    {0x0093, 0x0093, 0x0103, 0x0103}, {0x005c, 0x0060, 0x0064, 0x0068}, {0x0213, 0x0213, 0x010b, 0x010b},
    {0x012b, 0x012b, 0x0249, 0x0061}, {0x0181, 0x0291, 0x0241, 0x0041}, {0x0005, 0x0099, 0x0019, 0x0025},
    {0x0070, 0x0074, 0x0078, 0x0088}, {0x02a5, 0x0261, 0x0011, 0x00a5}, {0x0049, 0x0285, 0x0269, 0x0089},
    {0x0221, 0x007c, 0x0080, 0x0084}, {0x020b, 0x020b, 0x0003, 0x0003}, {0x00a3, 0x00a3, 0x02a3, 0x02a3},
    {0x02ab, 0x02ab, 0x0083, 0x0083}, {0x008c, 0x0090, 0x0094, 0x0098}, {0x028b, 0x028b, 0x0023, 0x0023},
    {0x0283, 0x0283, 0x002b, 0x002b}, {0x000b, 0x000b, 0x0203, 0x0203}, {0x022b, 0x022b, 0x00ab, 0x00ab}};

const uint16_t HuffmanCodeBook_3[39][4] = {
    {0x0003, 0x0003, 0x0004, 0x0008}, {0x0005, 0x0101, 0x0011, 0x0041}, {0x000c, 0x0010, 0x0014, 0x0020},
    {0x0017, 0x0017, 0x0143, 0x0143}, {0x0051, 0x0111, 0x0045, 0x0151}, {0x0105, 0x0055, 0x0018, 0x001c},
    {0x0157, 0x0157, 0x0147, 0x0147}, {0x0117, 0x0117, 0x0009, 0x0201}, {0x0024, 0x002c, 0x0040, 0x0054},
    {0x0241, 0x0019, 0x0065, 0x0028}, {0x0183, 0x0183, 0x0193, 0x0193}, {0x0030, 0x0034, 0x0038, 0x003c},
    {0x0027, 0x0027, 0x0253, 0x0253}, {0x005b, 0x005b, 0x0083, 0x0083}, {0x0063, 0x0063, 0x0093, 0x0093},
    {0x0023, 0x0023, 0x0213, 0x0213}, {0x0044, 0x0048, 0x004c, 0x0050}, {0x004b, 0x004b, 0x0167, 0x0167},
    {0x0163, 0x0163, 0x0097, 0x0097}, {0x0197, 0x0197, 0x0125, 0x0085}, {0x0185, 0x0121, 0x0159, 0x0255},
    {0x0058, 0x005c, 0x0060, 0x0070}, {0x0119, 0x0245, 0x0281, 0x0291}, {0x0069, 0x00a5, 0x0205, 0x0109},
    {0x01a1, 0x0064, 0x0068, 0x006c}, {0x002b, 0x002b, 0x01a7, 0x01a7}, {0x0217, 0x0217, 0x014b, 0x014b},
    {0x0297, 0x0297, 0x016b, 0x016b}, {0x0074, 0x0078, 0x007c, 0x0080}, {0x00a3, 0x00a3, 0x0263, 0x0263},
    {0x0285, 0x0129, 0x0099, 0x00a9}, {0x02a1, 0x01a9, 0x0199, 0x0265}, {0x02a5, 0x0084, 0x0088, 0x008c},
    {0x0223, 0x0223, 0x008b, 0x008b}, {0x0227, 0x0227, 0x0189, 0x0259}, {0x0219, 0x0090, 0x0094, 0x0098},
    {0x02ab, 0x02ab, 0x026b, 0x026b}, {0x029b, 0x029b, 0x024b, 0x024b}, {0x020b, 0x020b, 0x0229, 0x0289}};

const uint16_t HuffmanCodeBook_4[38][4] = {
    {0x0004, 0x0008, 0x000c, 0x0018}, {0x0155, 0x0151, 0x0115, 0x0055}, {0x0145, 0x0005, 0x0015, 0x0001},
    {0x0141, 0x0045, 0x0010, 0x0014}, {0x0107, 0x0107, 0x0053, 0x0053}, {0x0103, 0x0103, 0x0113, 0x0113},
    {0x001c, 0x0020, 0x0034, 0x0048}, {0x0043, 0x0043, 0x0013, 0x0013}, {0x0024, 0x0028, 0x002c, 0x0030},
    {0x015b, 0x015b, 0x0197, 0x0197}, {0x0167, 0x0167, 0x0257, 0x0257}, {0x005b, 0x005b, 0x011b, 0x011b},
    {0x0067, 0x0067, 0x014b, 0x014b}, {0x0038, 0x003c, 0x0040, 0x0044}, {0x0193, 0x0193, 0x0251, 0x0095},
    {0x0161, 0x0245, 0x0125, 0x0215}, {0x0185, 0x0019, 0x0049, 0x0025}, {0x0109, 0x0211, 0x0061, 0x0241},
    {0x004c, 0x0050, 0x0058, 0x006c}, {0x0091, 0x0121, 0x0205, 0x0181}, {0x0085, 0x0009, 0x0201, 0x0054},
    {0x0023, 0x0023, 0x0083, 0x0083}, {0x005c, 0x0060, 0x0064, 0x0068}, {0x01a7, 0x01a7, 0x016b, 0x016b},
    {0x019b, 0x019b, 0x0297, 0x0297}, {0x0267, 0x0267, 0x025b, 0x025b}, {0x00a5, 0x0069, 0x0099, 0x01a1},
    {0x0070, 0x0074, 0x0078, 0x0084}, {0x0291, 0x0129, 0x0261, 0x0189}, {0x0285, 0x01a9, 0x0225, 0x0249},
    {0x0219, 0x02a5, 0x007c, 0x0080}, {0x029b, 0x029b, 0x026b, 0x026b}, {0x00a3, 0x00a3, 0x002b, 0x002b},
    {0x0088, 0x008c, 0x0090, 0x0094}, {0x0283, 0x0283, 0x008b, 0x008b}, {0x0223, 0x0223, 0x020b, 0x020b},
    {0x02ab, 0x02ab, 0x02a3, 0x02a3}, {0x00ab, 0x00ab, 0x0229, 0x0289}};

const uint16_t HuffmanCodeBook_5[41][4] = {
    {0x0113, 0x0113, 0x0004, 0x0008}, {0x010d, 0x0115, 0x0151, 0x00d1}, {0x000c, 0x0010, 0x0014, 0x0028},
    {0x00d7, 0x00d7, 0x014f, 0x014f}, {0x00cf, 0x00cf, 0x0157, 0x0157}, {0x0018, 0x001c, 0x0020, 0x0024},
    {0x010b, 0x010b, 0x0193, 0x0193}, {0x011b, 0x011b, 0x0093, 0x0093}, {0x00c9, 0x0159, 0x008d, 0x0195},
    {0x0149, 0x00d9, 0x018d, 0x0095}, {0x002c, 0x0030, 0x0044, 0x0058}, {0x0105, 0x011d, 0x0051, 0x01d1},
    {0x0034, 0x0038, 0x003c, 0x0040}, {0x00c7, 0x00c7, 0x01d7, 0x01d7}, {0x015f, 0x015f, 0x004f, 0x004f},
    {0x0147, 0x0147, 0x00df, 0x00df}, {0x0057, 0x0057, 0x01cf, 0x01cf}, {0x0048, 0x004c, 0x0050, 0x0054},
    {0x018b, 0x018b, 0x019b, 0x019b}, {0x008b, 0x008b, 0x009b, 0x009b}, {0x0085, 0x009d, 0x01c9, 0x0059},
    {0x019d, 0x01d9, 0x0185, 0x0049}, {0x005c, 0x0060, 0x0074, 0x0088}, {0x0011, 0x0101, 0x0161, 0x0121},
    {0x0064, 0x0068, 0x006c, 0x0070}, {0x00c3, 0x00c3, 0x0213, 0x0213}, {0x00e3, 0x00e3, 0x000f, 0x000f},
    {0x0217, 0x0217, 0x020f, 0x020f}, {0x0143, 0x0143, 0x0017, 0x0017}, {0x0078, 0x007c, 0x0080, 0x0084},
    {0x005f, 0x005f, 0x0047, 0x0047}, {0x01c7, 0x01c7, 0x020b, 0x020b}, {0x0083, 0x0083, 0x01a3, 0x01a3},
    {0x001b, 0x001b, 0x021b, 0x021b}, {0x008c, 0x0090, 0x0094, 0x0098}, {0x01df, 0x01df, 0x0183, 0x0183},
    {0x0009, 0x00a1, 0x001d, 0x0041}, {0x01c1, 0x021d, 0x0205, 0x01e1}, {0x0061, 0x0005, 0x009c, 0x00a0},
    {0x0023, 0x0023, 0x0203, 0x0203}, {0x0223, 0x0223, 0x0003, 0x0003}};

const uint16_t HuffmanCodeBook_6[40][4] = {
    {0x0004, 0x0008, 0x000c, 0x001c}, {0x0111, 0x0115, 0x00d1, 0x0151}, {0x010d, 0x0155, 0x014d, 0x00d5},
    {0x00cd, 0x0010, 0x0014, 0x0018}, {0x00d9, 0x0159, 0x0149, 0x00c9}, {0x0109, 0x018d, 0x0119, 0x0095},
    {0x0195, 0x0091, 0x008d, 0x0191}, {0x0020, 0x0024, 0x0038, 0x004c}, {0x0099, 0x0189, 0x0089, 0x0199},
    {0x0028, 0x002c, 0x0030, 0x0034}, {0x0147, 0x0147, 0x015f, 0x015f}, {0x00df, 0x00df, 0x01cf, 0x01cf},
    {0x00c7, 0x00c7, 0x01d7, 0x01d7}, {0x0057, 0x0057, 0x004f, 0x004f}, {0x003c, 0x0040, 0x0044, 0x0048},
    {0x011f, 0x011f, 0x0107, 0x0107}, {0x0053, 0x0053, 0x01d3, 0x01d3}, {0x019f, 0x019f, 0x0085, 0x01c9},
    {0x01d9, 0x009d, 0x0059, 0x0049}, {0x0050, 0x005c, 0x0070, 0x0084}, {0x0185, 0x01dd, 0x0054, 0x0058},
    {0x005f, 0x005f, 0x0047, 0x0047}, {0x01c7, 0x01c7, 0x0017, 0x0017}, {0x0060, 0x0064, 0x0068, 0x006c},
    {0x000f, 0x000f, 0x0163, 0x0163}, {0x0143, 0x0143, 0x00c3, 0x00c3}, {0x0217, 0x0217, 0x00e3, 0x00e3},
    {0x020f, 0x020f, 0x0013, 0x0013}, {0x0074, 0x0078, 0x007c, 0x0080}, {0x0183, 0x0183, 0x0083, 0x0083},
    {0x021b, 0x021b, 0x000b, 0x000b}, {0x0103, 0x0103, 0x01a3, 0x01a3}, {0x00a3, 0x00a3, 0x020b, 0x020b},
    {0x0088, 0x008c, 0x0090, 0x0094}, {0x0123, 0x0123, 0x001b, 0x001b}, {0x0213, 0x0213, 0x0005, 0x0205},
    {0x001d, 0x0061, 0x021d, 0x01e1}, {0x01c1, 0x0041, 0x0098, 0x009c}, {0x0223, 0x0223, 0x0203, 0x0203},
    {0x0003, 0x0003, 0x0023, 0x0023}};

const uint16_t HuffmanCodeBook_7[31][4] = {
    {0x0003, 0x0003, 0x0004, 0x0008}, {0x0007, 0x0007, 0x0043, 0x0043}, {0x0045, 0x000c, 0x0010, 0x0024},
    {0x0049, 0x0085, 0x0009, 0x0081}, {0x0014, 0x0018, 0x001c, 0x0020}, {0x004f, 0x004f, 0x00c7, 0x00c7},
    {0x008b, 0x008b, 0x000f, 0x000f}, {0x00c3, 0x00c3, 0x00c9, 0x008d}, {0x0105, 0x0051, 0x0145, 0x0055},
    {0x0028, 0x002c, 0x0040, 0x0054}, {0x00cd, 0x0109, 0x0101, 0x0011}, {0x0030, 0x0034, 0x0038, 0x003c},
    {0x0093, 0x0093, 0x014b, 0x014b}, {0x0097, 0x0097, 0x0143, 0x0143}, {0x005b, 0x005b, 0x0017, 0x0017},
    {0x0187, 0x0187, 0x00d3, 0x00d3}, {0x0044, 0x0048, 0x004c, 0x0050}, {0x014f, 0x014f, 0x010f, 0x010f},
    {0x00d7, 0x00d7, 0x018b, 0x018b}, {0x009b, 0x009b, 0x01c7, 0x01c7}, {0x018d, 0x0181, 0x0019, 0x0111},
    {0x0058, 0x005c, 0x0060, 0x0068}, {0x005d, 0x0151, 0x009d, 0x0115}, {0x00d9, 0x01c9, 0x00dd, 0x0119},
    {0x0155, 0x0191, 0x01cd, 0x0064}, {0x001f, 0x001f, 0x01c3, 0x01c3}, {0x006c, 0x0070, 0x0074, 0x0078},
    {0x015b, 0x015b, 0x0197, 0x0197}, {0x011f, 0x011f, 0x01d3, 0x01d3}, {0x01d7, 0x01d7, 0x015f, 0x015f},
    {0x019d, 0x0199, 0x01d9, 0x01dd}};

const uint16_t HuffmanCodeBook_8[31][4] = {
    {0x0004, 0x0008, 0x0010, 0x0024}, {0x0047, 0x0047, 0x0049, 0x0005}, {0x0085, 0x0041, 0x0089, 0x000c},
    {0x0003, 0x0003, 0x000b, 0x000b}, {0x0014, 0x0018, 0x001c, 0x0020}, {0x0083, 0x0083, 0x004f, 0x004f},
    {0x00c7, 0x00c7, 0x008f, 0x008f}, {0x00cb, 0x00cb, 0x00cd, 0x0051}, {0x0105, 0x0091, 0x0109, 0x000d},
    {0x0028, 0x002c, 0x0040, 0x0054}, {0x00c1, 0x00d1, 0x010d, 0x0095}, {0x0030, 0x0034, 0x0038, 0x003c},
    {0x0057, 0x0057, 0x014b, 0x014b}, {0x0147, 0x0147, 0x00d7, 0x00d7}, {0x014f, 0x014f, 0x0113, 0x0113},
    {0x0117, 0x0117, 0x0103, 0x0103}, {0x0044, 0x0048, 0x004c, 0x0050}, {0x0153, 0x0153, 0x0013, 0x0013},
    {0x018b, 0x018b, 0x009b, 0x009b}, {0x005b, 0x005b, 0x0187, 0x0187}, {0x018d, 0x00d9, 0x0155, 0x0015},
    {0x0058, 0x005c, 0x0060, 0x0068}, {0x0119, 0x0141, 0x0191, 0x005d}, {0x009d, 0x01c9, 0x0159, 0x00dd},
    {0x01c5, 0x0195, 0x01cd, 0x0064}, {0x019b, 0x019b, 0x011f, 0x011f}, {0x006c, 0x0070, 0x0074, 0x0078},
    {0x001b, 0x001b, 0x01d3, 0x01d3}, {0x0183, 0x0183, 0x015f, 0x015f}, {0x019f, 0x019f, 0x01db, 0x01db},
    {0x01d5, 0x001d, 0x01c1, 0x01dd}};

const uint16_t HuffmanCodeBook_9[84][4] = {
    {0x0003, 0x0003, 0x0004, 0x0008}, {0x0007, 0x0007, 0x0043, 0x0043}, {0x0045, 0x000c, 0x0010, 0x002c},
    {0x0049, 0x0085, 0x0009, 0x0081}, {0x0014, 0x0018, 0x001c, 0x0020}, {0x004f, 0x004f, 0x008b, 0x008b},
    {0x00c7, 0x00c7, 0x000d, 0x00c1}, {0x00c9, 0x008d, 0x0105, 0x0051}, {0x0109, 0x0145, 0x0024, 0x0028},
    {0x0093, 0x0093, 0x00cf, 0x00cf}, {0x0103, 0x0103, 0x0013, 0x0013}, {0x0030, 0x0044, 0x0058, 0x00a4},
    {0x0034, 0x0038, 0x003c, 0x0040}, {0x0057, 0x0057, 0x014b, 0x014b}, {0x0187, 0x0187, 0x010f, 0x010f},
    {0x0097, 0x0097, 0x005b, 0x005b}, {0x00d3, 0x00d3, 0x0141, 0x0189}, {0x0048, 0x004c, 0x0050, 0x0054},
    {0x0015, 0x01c5, 0x014d, 0x0205}, {0x0061, 0x0111, 0x00d5, 0x0099}, {0x005d, 0x0181, 0x00a1, 0x0209},
    {0x018d, 0x01c9, 0x0151, 0x0065}, {0x005c, 0x0068, 0x007c, 0x0090}, {0x0245, 0x009d, 0x0060, 0x0064},
    {0x001b, 0x001b, 0x0117, 0x0117}, {0x00db, 0x00db, 0x00e3, 0x00e3}, {0x006c, 0x0070, 0x0074, 0x0078},
    {0x01c3, 0x01c3, 0x00a7, 0x00a7}, {0x020f, 0x020f, 0x0193, 0x0193}, {0x01cf, 0x01cf, 0x0203, 0x0203},
    {0x006b, 0x006b, 0x011b, 0x011b}, {0x0080, 0x0084, 0x0088, 0x008c}, {0x024b, 0x024b, 0x0157, 0x0157},
    {0x0023, 0x0023, 0x001f, 0x001f}, {0x00df, 0x00df, 0x00ab, 0x00ab}, {0x00e7, 0x00e7, 0x0123, 0x0123},
    {0x0094, 0x0098, 0x009c, 0x00a0}, {0x0287, 0x0287, 0x011f, 0x011f}, {0x015b, 0x015b, 0x0197, 0x0197},
    {0x0213, 0x0213, 0x01d3, 0x01d3}, {0x024f, 0x024f, 0x006f, 0x006f}, {0x00a8, 0x00bc, 0x00d0, 0x00f4},
    {0x00ac, 0x00b0, 0x00b4, 0x00b8}, {0x0217, 0x0217, 0x0027, 0x0027}, {0x0163, 0x0163, 0x00e9, 0x0289},
    {0x0241, 0x00ad, 0x0125, 0x0199}, {0x0071, 0x0251, 0x01a1, 0x02c5}, {0x00c0, 0x00c4, 0x00c8, 0x00cc},
    {0x0165, 0x0129, 0x01d5, 0x015d}, {0x02c9, 0x0305, 0x00b1, 0x00ed}, {0x028d, 0x0255, 0x01d9, 0x01e1},
    {0x012d, 0x0281, 0x019d, 0x00f1}, {0x00d4, 0x00d8, 0x00dc, 0x00e0}, {0x0029, 0x0169, 0x0291, 0x0219},
    {0x0309, 0x01a5, 0x01e5, 0x02d1}, {0x002d, 0x0259, 0x02cd, 0x0295}, {0x00e4, 0x00e8, 0x00ec, 0x00f0},
    {0x0223, 0x0223, 0x021f, 0x021f}, {0x0173, 0x0173, 0x030f, 0x030f}, {0x016f, 0x016f, 0x01df, 0x01df},
    {0x0133, 0x0133, 0x01af, 0x01af}, {0x00f8, 0x010c, 0x0120, 0x0134}, {0x00fc, 0x0100, 0x0104, 0x0108},
    {0x01ab, 0x01ab, 0x0313, 0x0313}, {0x025f, 0x025f, 0x02d7, 0x02d7}, {0x02c3, 0x02c3, 0x01b3, 0x01b3},
    {0x029b, 0x029b, 0x0033, 0x0033}, {0x0110, 0x0114, 0x0118, 0x011c}, {0x01eb, 0x01eb, 0x0317, 0x0317},
    {0x029f, 0x029f, 0x0227, 0x0227}, {0x0303, 0x0303, 0x01ef, 0x01ef}, {0x0263, 0x0263, 0x0267, 0x0267},
    {0x0124, 0x0128, 0x012c, 0x0130}, {0x022b, 0x022b, 0x02df, 0x02df}, {0x01f3, 0x01f3, 0x02db, 0x02db},
    {0x02e3, 0x02e3, 0x022f, 0x022f}, {0x031f, 0x031f, 0x031b, 0x031b}, {0x0138, 0x013c, 0x0140, 0x0144},
    {0x02a1, 0x0269, 0x0321, 0x02a5}, {0x02e5, 0x0325, 0x02e9, 0x0271}, {0x02a9, 0x026d, 0x0231, 0x02ad},
    {0x02b1, 0x02f1, 0x0148, 0x014c}, {0x032b, 0x032b, 0x02ef, 0x02ef}, {0x032f, 0x032f, 0x0333, 0x0333}};

const uint16_t HuffmanCodeBook_10[82][4] = {
    {0x0004, 0x000c, 0x0020, 0x004c}, {0x0045, 0x0085, 0x0049, 0x0008}, {0x008b, 0x008b, 0x0007, 0x0007},
    {0x0010, 0x0014, 0x0018, 0x001c}, {0x0043, 0x0043, 0x00c7, 0x00c7}, {0x008f, 0x008f, 0x004f, 0x004f},
    {0x00cb, 0x00cb, 0x00cf, 0x00cf}, {0x0009, 0x0081, 0x0109, 0x0091}, {0x0024, 0x0028, 0x002c, 0x0038},
    {0x0105, 0x0051, 0x0001, 0x00d1}, {0x010d, 0x000d, 0x00c1, 0x0111}, {0x0149, 0x0095, 0x0030, 0x0034},
    {0x0147, 0x0147, 0x0057, 0x0057}, {0x00d7, 0x00d7, 0x014f, 0x014f}, {0x003c, 0x0040, 0x0044, 0x0048},
    {0x0117, 0x0117, 0x0153, 0x0153}, {0x009b, 0x009b, 0x018b, 0x018b}, {0x00db, 0x00db, 0x0013, 0x0013},
    {0x005b, 0x005b, 0x0103, 0x0103}, {0x0050, 0x0064, 0x0078, 0x00c0}, {0x0054, 0x0058, 0x005c, 0x0060},
    {0x0187, 0x0187, 0x018f, 0x018f}, {0x0157, 0x0157, 0x011b, 0x011b}, {0x0193, 0x0193, 0x0159, 0x009d},
    {0x01cd, 0x01c9, 0x0195, 0x00a1}, {0x0068, 0x006c, 0x0070, 0x0074}, {0x00dd, 0x0015, 0x005d, 0x0141},
    {0x0061, 0x01c5, 0x00e1, 0x011d}, {0x01d1, 0x0209, 0x0199, 0x015d}, {0x0205, 0x020d, 0x0121, 0x0211},
    {0x007c, 0x0084, 0x0098, 0x00ac}, {0x01d5, 0x0161, 0x0215, 0x0080}, {0x019f, 0x019f, 0x01db, 0x01db},
    {0x0088, 0x008c, 0x0090, 0x0094}, {0x00a7, 0x00a7, 0x001b, 0x001b}, {0x021b, 0x021b, 0x00e7, 0x00e7},
    {0x024f, 0x024f, 0x0067, 0x0067}, {0x024b, 0x024b, 0x0183, 0x0183}, {0x009c, 0x00a0, 0x00a4, 0x00a8},
    {0x01a3, 0x01a3, 0x0127, 0x0127}, {0x0253, 0x0253, 0x00ab, 0x00ab}, {0x0247, 0x0247, 0x01df, 0x01df},
    {0x01e3, 0x01e3, 0x0167, 0x0167}, {0x00b0, 0x00b4, 0x00b8, 0x00bc}, {0x021f, 0x021f, 0x00eb, 0x00eb},
    {0x0257, 0x0257, 0x012b, 0x012b}, {0x028b, 0x028b, 0x006b, 0x006b}, {0x028f, 0x028f, 0x01a7, 0x01a7},
    {0x00c4, 0x00d8, 0x00ec, 0x0100}, {0x00c8, 0x00cc, 0x00d0, 0x00d4}, {0x025b, 0x025b, 0x0023, 0x0023},
    {0x0293, 0x0293, 0x001f, 0x001f}, {0x00af, 0x00af, 0x025d, 0x00ed}, {0x01a9, 0x0285, 0x006d, 0x01e5},
    {0x00dc, 0x00e0, 0x00e4, 0x00e8}, {0x01c1, 0x0221, 0x0169, 0x02cd}, {0x0295, 0x0261, 0x016d, 0x0201},
    {0x012d, 0x02c9, 0x029d, 0x0299}, {0x01e9, 0x02d1, 0x02c5, 0x00b1}, {0x00f0, 0x00f4, 0x00f8, 0x00fc},
    {0x0225, 0x00f1, 0x01ad, 0x02d5}, {0x0131, 0x01ed, 0x0171, 0x030d}, {0x02d9, 0x0025, 0x0229, 0x0029},
    {0x0071, 0x0241, 0x0311, 0x0265}, {0x0104, 0x010c, 0x0120, 0x0134}, {0x01b1, 0x0309, 0x02a1, 0x0108},
    {0x02a7, 0x02a7, 0x0307, 0x0307}, {0x0110, 0x0114, 0x0118, 0x011c}, {0x022f, 0x022f, 0x01f3, 0x01f3},
    {0x02df, 0x02df, 0x0317, 0x0317}, {0x031b, 0x031b, 0x026b, 0x026b}, {0x02e3, 0x02e3, 0x0233, 0x0233},
    {0x0124, 0x0128, 0x012c, 0x0130}, {0x0283, 0x0283, 0x031f, 0x031f}, {0x002f, 0x002f, 0x02ab, 0x02ab},
    {0x026f, 0x026f, 0x02af, 0x02af}, {0x02c3, 0x02c3, 0x02ef, 0x02ef}, {0x0138, 0x013c, 0x0140, 0x0144},
    {0x02e7, 0x02e7, 0x02eb, 0x02eb}, {0x0033, 0x0033, 0x0323, 0x0323}, {0x0271, 0x0329, 0x0325, 0x032d},
    {0x02f1, 0x0301, 0x02b1, 0x0331}};

const uint16_t HuffmanCodeBook_11[152][4] = {
    {0x0004, 0x0010, 0x0038, 0x008c}, {0x0001, 0x0085, 0x0008, 0x000c}, {0x0843, 0x0843, 0x0007, 0x0007},
    {0x0083, 0x0083, 0x008b, 0x008b}, {0x0014, 0x0018, 0x001c, 0x0024}, {0x0107, 0x0107, 0x010b, 0x010b},
    {0x0185, 0x008d, 0x010d, 0x0009}, {0x0189, 0x0101, 0x018d, 0x0020}, {0x0093, 0x0093, 0x0207, 0x0207},
    {0x0028, 0x002c, 0x0030, 0x0034}, {0x0113, 0x0113, 0x020b, 0x020b}, {0x0193, 0x0193, 0x020f, 0x020f},
    {0x000f, 0x000f, 0x0183, 0x0183}, {0x0097, 0x0097, 0x0117, 0x0117}, {0x003c, 0x0050, 0x0064, 0x0078},
    {0x0040, 0x0044, 0x0048, 0x004c}, {0x028b, 0x028b, 0x0213, 0x0213}, {0x0287, 0x0287, 0x0197, 0x0197},
    {0x028f, 0x028f, 0x0217, 0x0217}, {0x0291, 0x0119, 0x0309, 0x0099}, {0x0054, 0x0058, 0x005c, 0x0060},
    {0x0199, 0x030d, 0x0305, 0x0811}, {0x080d, 0x02c1, 0x01c1, 0x0241}, {0x0219, 0x0341, 0x0011, 0x0311},
    {0x0201, 0x0809, 0x0295, 0x0815}, {0x0068, 0x006c, 0x0070, 0x0074}, {0x03c1, 0x0141, 0x0441, 0x0389},
    {0x011d, 0x038d, 0x0299, 0x0315}, {0x0819, 0x0541, 0x019d, 0x009d}, {0x04c1, 0x081d, 0x0805, 0x0385},
    {0x007c, 0x0080, 0x0084, 0x0088}, {0x0391, 0x05c1, 0x021d, 0x0641}, {0x0821, 0x00c1, 0x0319, 0x0825},
    {0x0409, 0x0395, 0x0829, 0x06c1}, {0x01a1, 0x0121, 0x040d, 0x0015}, {0x0090, 0x00c8, 0x011c, 0x0170},
    {0x0094, 0x0098, 0x00a0, 0x00b4}, {0x0741, 0x082d, 0x029d, 0x0411}, {0x0399, 0x031d, 0x0281, 0x009c},
    {0x0223, 0x0223, 0x07c3, 0x07c3}, {0x00a4, 0x00a8, 0x00ac, 0x00b0}, {0x0833, 0x0833, 0x0407, 0x0407},
    {0x00a3, 0x00a3, 0x083b, 0x083b}, {0x0417, 0x0417, 0x0837, 0x0837}, {0x048f, 0x048f, 0x02a3, 0x02a3},
    {0x00b8, 0x00bc, 0x00c0, 0x00c4}, {0x039f, 0x039f, 0x048b, 0x048b}, {0x0323, 0x0323, 0x0127, 0x0127},
    {0x01a7, 0x01a7, 0x083f, 0x083f}, {0x0493, 0x0493, 0x041b, 0x041b}, {0x00cc, 0x00e0, 0x00f4, 0x0108},
    {0x00d0, 0x00d4, 0x00d8, 0x00dc}, {0x001b, 0x001b, 0x0227, 0x0227}, {0x0497, 0x0497, 0x03a3, 0x03a3},
    {0x041f, 0x041f, 0x0487, 0x0487}, {0x01ab, 0x01ab, 0x0303, 0x0303}, {0x00e4, 0x00e8, 0x00ec, 0x00f0},
    {0x012b, 0x012b, 0x00a7, 0x00a7}, {0x02a7, 0x02a7, 0x0513, 0x0513}, {0x050b, 0x050b, 0x0327, 0x0327},
    {0x050f, 0x050f, 0x049b, 0x049b}, {0x00f8, 0x00fc, 0x0100, 0x0104}, {0x022b, 0x022b, 0x0423, 0x0423},
    {0x02ab, 0x02ab, 0x03a7, 0x03a7}, {0x01af, 0x01af, 0x0507, 0x0507}, {0x001f, 0x001f, 0x032b, 0x032b},
    {0x010c, 0x0110, 0x0114, 0x0118}, {0x049f, 0x049f, 0x058f, 0x058f}, {0x0517, 0x0517, 0x00ab, 0x00ab},
    {0x0593, 0x0593, 0x012f, 0x012f}, {0x0137, 0x0137, 0x051b, 0x051b}, {0x0120, 0x0134, 0x0148, 0x015c},
    {0x0124, 0x0128, 0x012c, 0x0130}, {0x01b7, 0x01b7, 0x058b, 0x058b}, {0x0043, 0x0043, 0x0597, 0x0597},
    {0x02af, 0x02af, 0x022d, 0x0425}, {0x051d, 0x04a1, 0x0801, 0x0691}, {0x0138, 0x013c, 0x0140, 0x0144},
    {0x0381, 0x068d, 0x032d, 0x00b5}, {0x0235, 0x01b1, 0x0689, 0x02b5}, {0x0521, 0x0599, 0x0429, 0x03a9},
    {0x0139, 0x0231, 0x0585, 0x0611}, {0x014c, 0x0150, 0x0154, 0x0158}, {0x00ad, 0x060d, 0x0685, 0x0131},
    {0x059d, 0x070d, 0x0615, 0x0695}, {0x0239, 0x0711, 0x03ad, 0x01b9}, {0x02b1, 0x0335, 0x0331, 0x0021},
    {0x0160, 0x0164, 0x0168, 0x016c}, {0x042d, 0x0609, 0x04a5, 0x02b9}, {0x0699, 0x0529, 0x013d, 0x05a1},
    {0x0525, 0x0339, 0x04a9, 0x0715}, {0x04ad, 0x00b9, 0x0709, 0x0619}, {0x0174, 0x0188, 0x019c, 0x01cc},
    {0x0178, 0x017c, 0x0180, 0x0184}, {0x0605, 0x0435, 0x0401, 0x03b5}, {0x061d, 0x03b1, 0x069d, 0x01bd},
    {0x00b1, 0x0719, 0x0789, 0x02bd}, {0x023d, 0x0705, 0x05a5, 0x0791}, {0x018c, 0x0190, 0x0194, 0x0198},
    {0x03b9, 0x06a1, 0x04b5, 0x0621}, {0x0795, 0x078d, 0x05a9, 0x052d}, {0x0431, 0x033d, 0x03bd, 0x0721},
    {0x00bd, 0x071d, 0x0025, 0x0481}, {0x01a0, 0x01a4, 0x01a8, 0x01b8}, {0x06a5, 0x0625, 0x04b1, 0x0439},
    {0x06a9, 0x04b9, 0x0531, 0x0799}, {0x079d, 0x01ac, 0x01b0, 0x01b4}, {0x0727, 0x0727, 0x043f, 0x043f},
    {0x05af, 0x05af, 0x072f, 0x072f}, {0x0787, 0x0787, 0x062b, 0x062b}, {0x01bc, 0x01c0, 0x01c4, 0x01c8},
    {0x072b, 0x072b, 0x05b7, 0x05b7}, {0x0537, 0x0537, 0x06af, 0x06af}, {0x062f, 0x062f, 0x07a3, 0x07a3},
    {0x05bb, 0x05bb, 0x0637, 0x0637}, {0x01d0, 0x01e4, 0x01f8, 0x020c}, {0x01d4, 0x01d8, 0x01dc, 0x01e0},
    {0x06b3, 0x06b3, 0x04bf, 0x04bf}, {0x053b, 0x053b, 0x002b, 0x002b}, {0x05b3, 0x05b3, 0x07a7, 0x07a7},
    {0x0503, 0x0503, 0x0633, 0x0633}, {0x01e8, 0x01ec, 0x01f0, 0x01f4}, {0x002f, 0x002f, 0x0733, 0x0733},
    {0x07ab, 0x07ab, 0x06b7, 0x06b7}, {0x0683, 0x0683, 0x063b, 0x063b}, {0x053f, 0x053f, 0x05bf, 0x05bf},
    {0x01fc, 0x0200, 0x0204, 0x0208}, {0x07af, 0x07af, 0x06bb, 0x06bb}, {0x0037, 0x0037, 0x0583, 0x0583},
    {0x0737, 0x0737, 0x063f, 0x063f}, {0x06bf, 0x06bf, 0x07b3, 0x07b3}, {0x0210, 0x0214, 0x0218, 0x021c},
    {0x003b, 0x003b, 0x073b, 0x073b}, {0x07b7, 0x07b7, 0x0033, 0x0033}, {0x07bb, 0x07bb, 0x0701, 0x0601},
    {0x073d, 0x003d, 0x0781, 0x07bd}, {0x0118, 0x0117, 0x0100, 0x0109}, {0x05a5, 0x05a1, 0x05b7, 0x0513},
    {0x08f9, 0x08ff, 0x0821, 0x08ff}, {0x084f, 0x08ff, 0x08bc, 0x08ff}, {0x0815, 0x08ff, 0x0837, 0x08ff},
    {0x080d, 0x08ff, 0x085f, 0x08ff}, {0x084a, 0x08ff, 0x087d, 0x08ff}, {0x08ff, 0x08ff, 0x08a8, 0x08ff},
    {0x0815, 0x08ff, 0x083f, 0x08ff}, {0x0830, 0x08ff, 0x0894, 0x08ff}, {0x08d4, 0x08ff, 0x0825, 0x08ff},
    {0x08ef, 0x08ff, 0x083f, 0x08ff}, {0x0809, 0x08ff, 0x08fc, 0x08ff}, {0x0842, 0x08ff, 0x08b3, 0x08ff},
    {0x070d, 0x07a9, 0x060e, 0x06e2}, {0x06c7, 0x06d0, 0x04b2, 0x0407}};

const uint16_t HuffmanCodeBook_SCL[65][4] = {
    {0x00f3, 0x00f3, 0x0004, 0x0008}, {0x00ef, 0x00ef, 0x00f5, 0x00e9}, {0x00f9, 0x000c, 0x0010, 0x0014},
    {0x00e7, 0x00e7, 0x00ff, 0x00ff}, {0x00e1, 0x0101, 0x00dd, 0x0105}, {0x0018, 0x001c, 0x0020, 0x0028},
    {0x010b, 0x010b, 0x00db, 0x00db}, {0x010f, 0x010f, 0x00d5, 0x0111}, {0x00d1, 0x0115, 0x00cd, 0x0024},
    {0x011b, 0x011b, 0x00cb, 0x00cb}, {0x002c, 0x0030, 0x0034, 0x0040}, {0x00c7, 0x00c7, 0x011f, 0x011f},
    {0x0121, 0x00c1, 0x0125, 0x00bd}, {0x0129, 0x00b9, 0x0038, 0x003c}, {0x0133, 0x0133, 0x012f, 0x012f},
    {0x0137, 0x0137, 0x013b, 0x013b}, {0x0044, 0x0048, 0x004c, 0x0058}, {0x00b7, 0x00b7, 0x00af, 0x00af},
    {0x00b1, 0x013d, 0x00a9, 0x00a5}, {0x0141, 0x00a1, 0x0050, 0x0054}, {0x0147, 0x0147, 0x009f, 0x009f},
    {0x014b, 0x014b, 0x009b, 0x009b}, {0x005c, 0x0060, 0x0064, 0x0070}, {0x014f, 0x014f, 0x0095, 0x008d},
    {0x0155, 0x0085, 0x0091, 0x0089}, {0x0151, 0x0081, 0x0068, 0x006c}, {0x015f, 0x015f, 0x0167, 0x0167},
    {0x007b, 0x007b, 0x007f, 0x007f}, {0x0074, 0x0078, 0x0080, 0x00b0}, {0x0159, 0x0075, 0x0069, 0x006d},
    {0x0071, 0x0061, 0x0161, 0x007c}, {0x0067, 0x0067, 0x005b, 0x005b}, {0x0084, 0x0088, 0x008c, 0x009c},
    {0x005f, 0x005f, 0x0169, 0x0055}, {0x004d, 0x000d, 0x0005, 0x0009}, {0x0001, 0x0090, 0x0094, 0x0098},
    {0x018b, 0x018b, 0x018f, 0x018f}, {0x0193, 0x0193, 0x0197, 0x0197}, {0x019b, 0x019b, 0x01d7, 0x01d7},
    {0x00a0, 0x00a4, 0x00a8, 0x00ac}, {0x0187, 0x0187, 0x016f, 0x016f}, {0x0173, 0x0173, 0x0177, 0x0177},
    {0x017b, 0x017b, 0x017f, 0x017f}, {0x0183, 0x0183, 0x01a3, 0x01a3}, {0x00b4, 0x00c8, 0x00dc, 0x00f0},
    {0x00b8, 0x00bc, 0x00c0, 0x00c4}, {0x01bf, 0x01bf, 0x01c3, 0x01c3}, {0x01c7, 0x01c7, 0x01cb, 0x01cb},
    {0x01cf, 0x01cf, 0x01d3, 0x01d3}, {0x01bb, 0x01bb, 0x01a7, 0x01a7}, {0x00cc, 0x00d0, 0x00d4, 0x00d8},
    {0x01ab, 0x01ab, 0x01af, 0x01af}, {0x01b3, 0x01b3, 0x01b7, 0x01b7}, {0x01db, 0x01db, 0x001b, 0x001b},
    {0x0023, 0x0023, 0x0027, 0x0027}, {0x00e0, 0x00e4, 0x00e8, 0x00ec}, {0x002b, 0x002b, 0x0017, 0x0017},
    {0x019f, 0x019f, 0x01e3, 0x01e3}, {0x01df, 0x01df, 0x0013, 0x0013}, {0x001f, 0x001f, 0x003f, 0x003f},
    {0x00f4, 0x00f8, 0x00fc, 0x0100}, {0x0043, 0x0043, 0x004b, 0x004b}, {0x0053, 0x0053, 0x0047, 0x0047},
    {0x002f, 0x002f, 0x0033, 0x0033}, {0x003b, 0x003b, 0x0037, 0x0037}};

/* .CodeBook = HuffmanCodeBook_x, .Dimension = 4, .numBits = 2, .Offset =  0  */
const CodeBookDescription AACcodeBookDescriptionTable[13] = {{NULL, 0, 0, 0},
                                                             {HuffmanCodeBook_1, 4, 2, 1},
                                                             {HuffmanCodeBook_2, 4, 2, 1},
                                                             {HuffmanCodeBook_3, 4, 2, 0},
                                                             {HuffmanCodeBook_4, 4, 2, 0},
                                                             {HuffmanCodeBook_5, 2, 4, 4},
                                                             {HuffmanCodeBook_6, 2, 4, 4},
                                                             {HuffmanCodeBook_7, 2, 4, 0},
                                                             {HuffmanCodeBook_8, 2, 4, 0},
                                                             {HuffmanCodeBook_9, 2, 4, 0},
                                                             {HuffmanCodeBook_10, 2, 4, 0},
                                                             {HuffmanCodeBook_11, 2, 5, 0},
                                                             {HuffmanCodeBook_SCL, 1, 8, 60}};

const CodeBookDescription AACcodeBookDescriptionSCL = {HuffmanCodeBook_SCL, 1, 8, 60};

/* *********************************************************************************************
 */
/*  Table: HuffTree41 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 1).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 4)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 4 */
/* ---------------------------------------------------------------------------------------------
 */
/* HuffTree */
const uint32_t aHuffTree41[80] = {
    0x4a0001, 0x026002, 0x013003, 0x021004, 0x01c005, 0x00b006, 0x010007, 0x019008, 0x00900e, 0x00a03a,
    0x400528, 0x00c037, 0x00d03b, 0x454404, 0x00f04c, 0x448408, 0x017011, 0x01202e, 0x42c40c, 0x034014,
    0x01502c, 0x016049, 0x410470, 0x01804e, 0x414424, 0x03201a, 0x02001b, 0x520418, 0x02f01d, 0x02a01e,
    0x01f04d, 0x41c474, 0x540420, 0x022024, 0x04a023, 0x428510, 0x025029, 0x430508, 0x02703c, 0x028047,
    0x50c434, 0x438478, 0x04802b, 0x46443c, 0x02d03e, 0x4404b0, 0x44451c, 0x03003f, 0x03104b, 0x52444c,
    0x033039, 0x4f0450, 0x035041, 0x036046, 0x4e8458, 0x04f038, 0x45c53c, 0x4604e0, 0x4f8468, 0x46c4d4,
    0x04503d, 0x4ac47c, 0x518480, 0x043040, 0x4844dc, 0x042044, 0x4884a8, 0x4bc48c, 0x530490, 0x4a4494,
    0x4984b8, 0x49c4c4, 0x5044b4, 0x5004c0, 0x4d04c8, 0x4f44cc, 0x4d8538, 0x4ec4e4, 0x52c4fc, 0x514534};

/* *********************************************************************************************
 */
/*  Table: HuffTree42 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 2).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 4)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 4 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree42[80] = {
    0x026001, 0x014002, 0x009003, 0x010004, 0x01d005, 0x00600d, 0x007018, 0x450008, 0x4e0400, 0x02e00a,
    0x03900b, 0x03d00c, 0x43c404, 0x01b00e, 0x00f04f, 0x4d8408, 0x023011, 0x01203b, 0x01a013, 0x41440c,
    0x015020, 0x016040, 0x025017, 0x500410, 0x038019, 0x540418, 0x41c444, 0x02d01c, 0x420520, 0x01e042,
    0x03701f, 0x4244cc, 0x02a021, 0x02204c, 0x478428, 0x024031, 0x42c4dc, 0x4304e8, 0x027033, 0x4a0028,
    0x50c029, 0x4344a4, 0x02c02b, 0x470438, 0x4404c8, 0x4f8448, 0x04902f, 0x04b030, 0x44c484, 0x524032,
    0x4ec454, 0x03e034, 0x035046, 0x4c4036, 0x488458, 0x4d445c, 0x460468, 0x04e03a, 0x51c464, 0x03c04a,
    0x46c514, 0x47453c, 0x04503f, 0x47c4ac, 0x044041, 0x510480, 0x04304d, 0x4e448c, 0x490518, 0x49449c,
    0x048047, 0x4c0498, 0x4b84a8, 0x4b0508, 0x4fc4b4, 0x4bc504, 0x5304d0, 0x5344f0, 0x4f452c, 0x528538};

/* *********************************************************************************************
 */
/*  Table: HuffTree43 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 3).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 4)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 4 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree43[80] = {
    0x400001, 0x002004, 0x00300a, 0x46c404, 0x00b005, 0x00600d, 0x034007, 0x037008, 0x494009, 0x4d8408,
    0x42440c, 0x00c01b, 0x490410, 0x00e016, 0x00f011, 0x010014, 0x4144fc, 0x01201d, 0x020013, 0x508418,
    0x4c0015, 0x41c440, 0x022017, 0x018026, 0x019035, 0x03801a, 0x420444, 0x01c01f, 0x430428, 0x02101e,
    0x44842c, 0x478434, 0x4b4438, 0x45443c, 0x02c023, 0x039024, 0x02503f, 0x48844c, 0x030027, 0x02e028,
    0x032029, 0x02a041, 0x4d402b, 0x4504f0, 0x04302d, 0x4584a8, 0x02f03b, 0x46045c, 0x03103d, 0x464046,
    0x033044, 0x46853c, 0x47049c, 0x045036, 0x4744dc, 0x4a047c, 0x500480, 0x4ac03a, 0x4b8484, 0x03c04e,
    0x48c524, 0x03e040, 0x4984e8, 0x50c4a4, 0x4b0530, 0x042047, 0x4bc04b, 0x4e44c4, 0x5184c8, 0x52c4cc,
    0x5204d0, 0x04d048, 0x04a049, 0x4e004c, 0x51c4ec, 0x4f4510, 0x5284f8, 0x50404f, 0x514538, 0x540534};

/* *********************************************************************************************
 */
/*  Table: HuffTree44 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 4).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 4)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 4 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree44[80] = {
    0x001004, 0x020002, 0x036003, 0x490400, 0x005008, 0x010006, 0x01f007, 0x404428, 0x00e009, 0x01100a,
    0x00b018, 0x01600c, 0x03700d, 0x408015, 0x00f03e, 0x40c424, 0x410478, 0x022012, 0x038013, 0x01e014,
    0x454414, 0x448418, 0x025017, 0x47441c, 0x030019, 0x02601a, 0x02d01b, 0x01c034, 0x01d029, 0x4204f0,
    0x4dc42c, 0x470430, 0x02103c, 0x4a0434, 0x02302a, 0x440024, 0x4384a8, 0x43c44c, 0x02703a, 0x02802c,
    0x444524, 0x4504e0, 0x02b03d, 0x458480, 0x45c4f4, 0x04b02e, 0x04f02f, 0x460520, 0x042031, 0x048032,
    0x049033, 0x514464, 0x03504c, 0x540468, 0x47c46c, 0x4844d8, 0x039044, 0x4884fc, 0x03b045, 0x48c53c,
    0x49449c, 0x4b8498, 0x03f046, 0x041040, 0x4c44a4, 0x50c4ac, 0x04a043, 0x5184b0, 0x4e44b4, 0x4bc4ec,
    0x04e047, 0x4c04e8, 0x4c8510, 0x4cc52c, 0x4d0530, 0x5044d4, 0x53804d, 0x5284f8, 0x508500, 0x51c534};

/* *********************************************************************************************
 */
/*  Table: HuffTree21 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 5).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree21[80] = {
    0x450001, 0x044002, 0x042003, 0x035004, 0x026005, 0x022006, 0x013007, 0x010008, 0x00d009, 0x01c00a,
    0x01f00b, 0x01e00c, 0x4a0400, 0x01b00e, 0x03200f, 0x47e402, 0x020011, 0x01204d, 0x40449c, 0x017014,
    0x015019, 0x01603f, 0x406458, 0x01804f, 0x448408, 0x04901a, 0x40a45a, 0x48c40c, 0x01d031, 0x40e48e,
    0x490410, 0x492412, 0x021030, 0x480414, 0x033023, 0x02402e, 0x02503e, 0x416482, 0x02a027, 0x02802c,
    0x029040, 0x418468, 0x02b04a, 0x41a486, 0x02d048, 0x41c484, 0x04e02f, 0x41e426, 0x420434, 0x42249e,
    0x424494, 0x03d034, 0x428470, 0x039036, 0x03703b, 0x038041, 0x42a476, 0x03a04b, 0x42c454, 0x03c047,
    0x42e472, 0x430478, 0x43246e, 0x496436, 0x488438, 0x43a466, 0x046043, 0x43c464, 0x04504c, 0x43e462,
    0x460440, 0x44245e, 0x45c444, 0x46a446, 0x44a456, 0x47444c, 0x45244e, 0x46c47c, 0x48a47a, 0x49a498};

/* *********************************************************************************************
 */
/*  Table: HuffTree22 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 6).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree22[80] = {
    0x03c001, 0x02f002, 0x020003, 0x01c004, 0x00f005, 0x00c006, 0x016007, 0x04d008, 0x00b009, 0x01500a,
    0x400490, 0x40e402, 0x00d013, 0x00e02a, 0x40c404, 0x019010, 0x011041, 0x038012, 0x40a406, 0x014037,
    0x40849c, 0x4a0410, 0x04a017, 0x458018, 0x412422, 0x02801a, 0x01b029, 0x480414, 0x02401d, 0x01e02b,
    0x48a01f, 0x416432, 0x02d021, 0x026022, 0x023039, 0x418468, 0x025043, 0x48641a, 0x027040, 0x41c488,
    0x41e48c, 0x42045a, 0x47c424, 0x04c02c, 0x46e426, 0x03602e, 0x428478, 0x030033, 0x43c031, 0x04b032,
    0x42e42a, 0x03403a, 0x035048, 0x42c442, 0x470430, 0x494434, 0x43649a, 0x45c438, 0x04403b, 0x43a454,
    0x04503d, 0x03e03f, 0x43e464, 0x440460, 0x484444, 0x049042, 0x446448, 0x44a456, 0x46644c, 0x047046,
    0x44e452, 0x450462, 0x47445e, 0x46a496, 0x49846c, 0x472476, 0x47a482, 0x04e04f, 0x47e492, 0x48e49e};

/* *********************************************************************************************
 */
/*  Table: HuffTree23 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 7).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree23[63] = {
    0x400001, 0x002003, 0x410402, 0x004007, 0x412005, 0x01c006, 0x420404, 0x00800b, 0x01d009, 0x00a01f, 0x406026,
    0x00c012, 0x00d00f, 0x02700e, 0x408440, 0x010022, 0x028011, 0x45440a, 0x013017, 0x029014, 0x024015, 0x01602f,
    0x43c40c, 0x02b018, 0x019033, 0x03201a, 0x43e01b, 0x47040e, 0x422414, 0x01e025, 0x432416, 0x020021, 0x418442,
    0x41a452, 0x036023, 0x41c446, 0x46441e, 0x424430, 0x426434, 0x436428, 0x44442a, 0x02e02a, 0x45642c, 0x03002c,
    0x02d03b, 0x46642e, 0x43a438, 0x460448, 0x031037, 0x47244a, 0x45a44c, 0x034039, 0x038035, 0x47844e, 0x462450,
    0x474458, 0x46a45c, 0x03a03c, 0x45e47a, 0x476468, 0x03d03e, 0x47c46c, 0x46e47e};

/* *********************************************************************************************
 */
/*  Table: HuffTree24 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 8).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree24[63] = {
    0x001006, 0x01d002, 0x005003, 0x424004, 0x400420, 0x414402, 0x00700a, 0x008020, 0x00901f, 0x404432, 0x00b011,
    0x00c00e, 0x00d032, 0x406446, 0x02300f, 0x033010, 0x458408, 0x025012, 0x013016, 0x01402f, 0x015038, 0x46840a,
    0x028017, 0x01801a, 0x039019, 0x40c47a, 0x03e01b, 0x03b01c, 0x40e47e, 0x41201e, 0x422410, 0x416434, 0x02a021,
    0x02202b, 0x418444, 0x02c024, 0x41a456, 0x02d026, 0x027034, 0x46241c, 0x029036, 0x41e45c, 0x426031, 0x428430,
    0x45242a, 0x03702e, 0x42c464, 0x03003c, 0x47442e, 0x436442, 0x438454, 0x43a448, 0x03503a, 0x43c466, 0x43e03d,
    0x44a440, 0x44c472, 0x46044e, 0x45a450, 0x45e470, 0x46a476, 0x46c478, 0x47c46e};

/* *********************************************************************************************
 */
/*  Table: HuffTree25 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 9).        */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree25[168] = {
    0x400001, 0x002003, 0x41a402, 0x004007, 0x41c005, 0x035006, 0x434404, 0x008010, 0x00900c, 0x04a00a, 0x42000b,
    0x44e406, 0x03600d, 0x03800e, 0x05a00f, 0x408468, 0x01101a, 0x012016, 0x039013, 0x070014, 0x46e015, 0x40a440,
    0x03b017, 0x01804d, 0x01904f, 0x4b840c, 0x01b022, 0x01c041, 0x03f01d, 0x01e020, 0x01f05b, 0x40e4ee, 0x02107c,
    0x45c410, 0x02302c, 0x024028, 0x053025, 0x026045, 0x02707d, 0x412522, 0x047029, 0x05e02a, 0x02b08a, 0x526414,
    0x05602d, 0x02e081, 0x02f032, 0x06e030, 0x031080, 0x416544, 0x079033, 0x034091, 0x41852c, 0x43641e, 0x04b037,
    0x42246a, 0x43c424, 0x04c03a, 0x426456, 0x03c066, 0x03d03e, 0x482428, 0x45842a, 0x040072, 0x42c4ba, 0x050042,
    0x04305c, 0x044074, 0x42e4be, 0x06a046, 0x4dc430, 0x075048, 0x0490a3, 0x44a432, 0x450438, 0x43a452, 0x48443e,
    0x04e068, 0x45a442, 0x4d4444, 0x051088, 0x052087, 0x44648c, 0x077054, 0x4da055, 0x50a448, 0x057060, 0x06b058,
    0x05906d, 0x44c4f6, 0x46c454, 0x45e474, 0x06905d, 0x460520, 0x05f07e, 0x462494, 0x061063, 0x07f062, 0x464496,
    0x06408b, 0x08d065, 0x542466, 0x067071, 0x4d2470, 0x4724ec, 0x478476, 0x53a47a, 0x09b06c, 0x47c4ac, 0x4f847e,
    0x06f078, 0x510480, 0x48649e, 0x4884a0, 0x07307b, 0x49c48a, 0x4a648e, 0x098076, 0x4904c0, 0x4924ea, 0x4c8498,
    0x07a08e, 0x51249a, 0x4a24d6, 0x5064a4, 0x4f24a8, 0x4aa4de, 0x51e4ae, 0x4b0538, 0x082092, 0x083085, 0x08f084,
    0x5464b2, 0x096086, 0x4ce4b4, 0x4d04b6, 0x089090, 0x4bc508, 0x4c253e, 0x08c0a4, 0x5284c4, 0x4e04c6, 0x4ca4fa,
    0x5144cc, 0x4f04d8, 0x4e24fc, 0x09309c, 0x094099, 0x095097, 0x4e4516, 0x4e652e, 0x4e84fe, 0x4f450c, 0x09a09f,
    0x500502, 0x50450e, 0x09d0a0, 0x09e0a5, 0x518530, 0x51a54a, 0x0a70a1, 0x0a20a6, 0x51c534, 0x53c524, 0x54052a,
    0x548532, 0x536550, 0x54c54e};

/* *********************************************************************************************
 */
/*  Table: HuffTree26 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 10).       */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree26[168] = {
    0x006001, 0x002013, 0x00300f, 0x00400d, 0x03b005, 0x40046e, 0x037007, 0x00800a, 0x009067, 0x402420, 0x05600b,
    0x00c057, 0x434404, 0x06600e, 0x406470, 0x03c010, 0x059011, 0x06f012, 0x49e408, 0x014019, 0x03f015, 0x016044,
    0x017042, 0x079018, 0x4b840a, 0x01a01f, 0x01b047, 0x07c01c, 0x08701d, 0x06901e, 0x44640c, 0x020027, 0x04b021,
    0x02204f, 0x023025, 0x02406b, 0x40e4e0, 0x081026, 0x528410, 0x02802c, 0x06c029, 0x08f02a, 0x02b078, 0x53a412,
    0x05202d, 0x02e033, 0x02f031, 0x0300a2, 0x4144ce, 0x0a6032, 0x416534, 0x09a034, 0x09f035, 0x0360a7, 0x54e418,
    0x03a038, 0x436039, 0x43841a, 0x41c41e, 0x42246a, 0x05803d, 0x03e068, 0x424484, 0x04005b, 0x04107a, 0x42645a,
    0x043093, 0x4d2428, 0x05e045, 0x046072, 0x42a45e, 0x048060, 0x073049, 0x04a098, 0x42c4c4, 0x07504c, 0x09504d,
    0x04e09c, 0x51042e, 0x063050, 0x077051, 0x43053c, 0x053084, 0x065054, 0x4e4055, 0x4fe432, 0x43a454, 0x43c46c,
    0x43e486, 0x07005a, 0x4a0440, 0x07105c, 0x05d07b, 0x45c442, 0x05f08a, 0x476444, 0x07f061, 0x06206a, 0x448506,
    0x06408e, 0x52644a, 0x54444c, 0x45644e, 0x452450, 0x488458, 0x4604ec, 0x4624f6, 0x50e464, 0x08206d, 0x0a406e,
    0x542466, 0x4a2468, 0x48a472, 0x474089, 0x4d8478, 0x097074, 0x47a508, 0x08d076, 0x47c4b6, 0x51247e, 0x4804fc,
    0x4bc482, 0x48c4a4, 0x48e4d4, 0x07d07e, 0x4904da, 0x49208b, 0x094080, 0x49450c, 0x4964e2, 0x09d083, 0x52a498,
    0x085091, 0x0a5086, 0x4cc49a, 0x08808c, 0x4ee49c, 0x4a64ba, 0x4a84c0, 0x4c24aa, 0x4ac4f0, 0x4ae4d0, 0x4ca4b0,
    0x0900a1, 0x4b24ea, 0x092099, 0x4b4516, 0x4d64be, 0x4c650a, 0x522096, 0x4c8524, 0x4dc4f2, 0x4de4f4, 0x4e6548,
    0x09e09b, 0x5384e8, 0x5204f8, 0x4fa53e, 0x50051a, 0x0a30a0, 0x502536, 0x514504, 0x51e518, 0x54a51c, 0x54052c,
    0x52e546, 0x530532, 0x54c550};

/* *********************************************************************************************
 */
/*  Table: HuffTree27 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the decode tree for spectral data
 * (Codebook 11).       */
/*                    bit 23 and 11 not used */
/*                    bit 22 and 10 determine end value */
/*                    bit 21-12 and 9-0 (offset to next node) or (index value *
 * 2)               */
/* ---------------------------------------------------------------------------------------------
 */
/*    input:          codeword */
/* ---------------------------------------------------------------------------------------------
 */
/*    output:         index * 2 */
/* ---------------------------------------------------------------------------------------------
 */
const uint32_t aHuffTree27[288] = {
    0x00100d, 0x002006, 0x003004, 0x400424, 0x047005, 0x402446, 0x048007, 0x00800a, 0x00904c, 0x44a404, 0x07400b,
    0x00c0bb, 0x466406, 0x00e014, 0x00f054, 0x04e010, 0x051011, 0x0a9012, 0x0130bc, 0x408464, 0x01501f, 0x01601a,
    0x017059, 0x0af018, 0x0ca019, 0x40a0e4, 0x01b05e, 0x01c084, 0x0bf01d, 0x05d01e, 0x55a40c, 0x020026, 0x021066,
    0x043022, 0x023062, 0x02408d, 0x025108, 0x40e480, 0x027030, 0x02802c, 0x02906b, 0x02a0da, 0x06502b, 0x4105c8,
    0x0a402d, 0x0ec02e, 0x0dd02f, 0x532412, 0x06e031, 0x032036, 0x03303e, 0x0fd034, 0x0fc035, 0x4145b0, 0x03703a,
    0x038117, 0x10d039, 0x5ba416, 0x10f03b, 0x03c041, 0x5fa03d, 0x41c418, 0x10403f, 0x04011d, 0x41a5f4, 0x11c042,
    0x41e61c, 0x087044, 0x0f5045, 0x0d9046, 0x4204a2, 0x640422, 0x04904a, 0x426448, 0x04b073, 0x428468, 0x46c04d,
    0x48a42a, 0x04f077, 0x076050, 0x42c4b0, 0x0520a7, 0x096053, 0x42e4a8, 0x05507d, 0x07a056, 0x0d4057, 0x0df058,
    0x442430, 0x05a081, 0x05b09b, 0x05c0e2, 0x5b8432, 0x4fe434, 0x05f09e, 0x0e6060, 0x0610d6, 0x57c436, 0x0cc063,
    0x112064, 0x4384a0, 0x43a5ca, 0x067089, 0x0680b7, 0x0690a2, 0x0a106a, 0x43c59c, 0x09206c, 0x06d0ba, 0x60643e,
    0x0d106f, 0x0700ee, 0x0de071, 0x10b072, 0x44056c, 0x46a444, 0x075094, 0x48c44c, 0x44e490, 0x095078, 0x0ab079,
    0x4504ce, 0x07b097, 0x11e07c, 0x630452, 0x0ac07e, 0x07f099, 0x080106, 0x4544b8, 0x0820b1, 0x0830e5, 0x4fc456,
    0x0b3085, 0x08609d, 0x45853e, 0x0880c2, 0x5c045a, 0x08a08f, 0x08b0ce, 0x08c0f7, 0x58645c, 0x11108e, 0x45e5c4,
    0x0c4090, 0x10a091, 0x4604e4, 0x0d0093, 0x462608, 0x48e46e, 0x4704b2, 0x4d2472, 0x0980bd, 0x4f2474, 0x0e309a,
    0x4764aa, 0x0be09c, 0x47851a, 0x47a4de, 0x09f0b5, 0x0a00c1, 0x50047c, 0x57847e, 0x0a30c3, 0x504482, 0x0e90a5,
    0x0a6100, 0x4c8484, 0x0a811f, 0x48662a, 0x0c70aa, 0x488494, 0x4924d0, 0x0ad0c8, 0x0ae0d8, 0x496636, 0x10e0b0,
    0x4f8498, 0x0f30b2, 0x49a4dc, 0x0f20b4, 0x53c49c, 0x0b60cb, 0x49e57a, 0x0b80e0, 0x0b9109, 0x5e44a4, 0x5484a6,
    0x4ac4ae, 0x4b44ca, 0x4d64b6, 0x4ba5da, 0x0c60c0, 0x4bc51e, 0x4be556, 0x6204c0, 0x4c24c4, 0x0f80c5, 0x5664c6,
    0x4cc53a, 0x4d462c, 0x0f10c9, 0x4d8552, 0x4da4fa, 0x5be4e0, 0x0cd0ff, 0x5244e2, 0x0cf0e8, 0x4e6568, 0x59a4e8,
    0x0f90d2, 0x1010d3, 0x5ac4ea, 0x0d50d7, 0x4ec634, 0x4ee560, 0x4f44f0, 0x4f6638, 0x502522, 0x0db0dc, 0x5065a6,
    0x508604, 0x60050a, 0x50c0fb, 0x63250e, 0x1130e1, 0x5a4510, 0x5125fc, 0x516514, 0x51863e, 0x51c536, 0x0e70f4,
    0x55c520, 0x602526, 0x0eb0ea, 0x5cc528, 0x5ea52a, 0x1140ed, 0x60c52c, 0x1020ef, 0x0f0119, 0x58e52e, 0x530622,
    0x558534, 0x53861e, 0x55e540, 0x5800f6, 0x57e542, 0x5445e6, 0x5465e8, 0x0fa115, 0x54c54a, 0x54e60e, 0x5ae550,
    0x1160fe, 0x5f0554, 0x564562, 0x56a58a, 0x56e5ee, 0x10310c, 0x5705d0, 0x107105, 0x5725d4, 0x57463a, 0x5765b4,
    0x5825bc, 0x5845e2, 0x5885de, 0x58c592, 0x5ce590, 0x5945f6, 0x63c596, 0x11b110, 0x5d8598, 0x5c259e, 0x5e05a0,
    0x5a25c6, 0x5a860a, 0x5aa5ec, 0x5b2610, 0x11a118, 0x6185b6, 0x5f25d2, 0x5d6616, 0x5dc5f8, 0x61a5fe, 0x612614,
    0x62e624, 0x626628};

/* get starting addresses of huffman tables into an array [convert codebook into
 * starting address] */
/* cb    tree */
const uint32_t *aHuffTable[MAX_CB] = {aHuffTree41,
                                      /* 0      -   */ /* use tree 1 as dummy here */
                                      aHuffTree41,     /* 1      1   */
                                      aHuffTree42,     /* 2      2   */
                                      aHuffTree43,     /* 3      3   */
                                      aHuffTree44,     /* 4      4   */
                                      aHuffTree21,     /* 5      5   */
                                      aHuffTree22,     /* 6      6   */
                                      aHuffTree23,     /* 7      7   */
                                      aHuffTree24,     /* 8      8   */
                                      aHuffTree25,     /* 9      9   */
                                      aHuffTree26,     /* 10     10  */
                                      aHuffTree27,     /* 11     11  */
                                      aHuffTree41,
                                      /* 12     -   */ /* use tree 1 as dummy here */
                                      aHuffTree41,
                                      /* 13     -   */ /* use tree 1 as dummy here */
                                      aHuffTree41,
                                      /* 14     -   */ /* use tree 1 as dummy here */
                                      aHuffTree41,
                                      /* 15     -   */ /* use tree 1 as dummy here */
                                      aHuffTree27,     /* 16     11  */
                                      aHuffTree27,     /* 17     11  */
                                      aHuffTree27,     /* 18     11  */
                                      aHuffTree27,     /* 19     11  */
                                      aHuffTree27,     /* 20     11  */
                                      aHuffTree27,     /* 21     11  */
                                      aHuffTree27,     /* 22     11  */
                                      aHuffTree27,     /* 23     11  */
                                      aHuffTree27,     /* 24     11  */
                                      aHuffTree27,     /* 25     11  */
                                      aHuffTree27,     /* 26     11  */
                                      aHuffTree27,     /* 27     11  */
                                      aHuffTree27,     /* 28     11  */
                                      aHuffTree27,     /* 29     11  */
                                      aHuffTree27,     /* 30     11  */
                                      aHuffTree27};    /* 31     11  */

/*---------------------------------------------------------------------------------------------
   data-description:
  The following tables contain the quantized values. Two or four of the
 quantized values are indexed by the result of the decoding in the decoding tree
 (see tables above).
 --------------------------------------------------------------------------------------------
 */

/* *********************************************************************************************
 */
/*  Table: ValTab41 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the quantized values for codebooks
 * 1-2.                */
/* ---------------------------------------------------------------------------------------------
 */
const int8_t aValTab41[324] = {
    -1, -1, -1, -1, -1, -1, -1, 0,  -1, -1, -1, 1,  -1, -1, 0,  -1, -1, -1, 0,  0,  -1, -1, 0,  1,  -1, -1, 1,
    -1, -1, -1, 1,  0,  -1, -1, 1,  1,  -1, 0,  -1, -1, -1, 0,  -1, 0,  -1, 0,  -1, 1,  -1, 0,  0,  -1, -1, 0,
    0,  0,  -1, 0,  0,  1,  -1, 0,  1,  -1, -1, 0,  1,  0,  -1, 0,  1,  1,  -1, 1,  -1, -1, -1, 1,  -1, 0,  -1,
    1,  -1, 1,  -1, 1,  0,  -1, -1, 1,  0,  0,  -1, 1,  0,  1,  -1, 1,  1,  -1, -1, 1,  1,  0,  -1, 1,  1,  1,
    0,  -1, -1, -1, 0,  -1, -1, 0,  0,  -1, -1, 1,  0,  -1, 0,  -1, 0,  -1, 0,  0,  0,  -1, 0,  1,  0,  -1, 1,
    -1, 0,  -1, 1,  0,  0,  -1, 1,  1,  0,  0,  -1, -1, 0,  0,  -1, 0,  0,  0,  -1, 1,  0,  0,  0,  -1, 0,  0,
    0,  0,  0,  0,  0,  1,  0,  0,  1,  -1, 0,  0,  1,  0,  0,  0,  1,  1,  0,  1,  -1, -1, 0,  1,  -1, 0,  0,
    1,  -1, 1,  0,  1,  0,  -1, 0,  1,  0,  0,  0,  1,  0,  1,  0,  1,  1,  -1, 0,  1,  1,  0,  0,  1,  1,  1,
    1,  -1, -1, -1, 1,  -1, -1, 0,  1,  -1, -1, 1,  1,  -1, 0,  -1, 1,  -1, 0,  0,  1,  -1, 0,  1,  1,  -1, 1,
    -1, 1,  -1, 1,  0,  1,  -1, 1,  1,  1,  0,  -1, -1, 1,  0,  -1, 0,  1,  0,  -1, 1,  1,  0,  0,  -1, 1,  0,
    0,  0,  1,  0,  0,  1,  1,  0,  1,  -1, 1,  0,  1,  0,  1,  0,  1,  1,  1,  1,  -1, -1, 1,  1,  -1, 0,  1,
    1,  -1, 1,  1,  1,  0,  -1, 1,  1,  0,  0,  1,  1,  0,  1,  1,  1,  1,  -1, 1,  1,  1,  0,  1,  1,  1,  1};

/* *********************************************************************************************
 */
/*  Table: ValTab42 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the quantized values for codebooks
 * 3-4.                */
/* ---------------------------------------------------------------------------------------------
 */
const int8_t aValTab42[324] = {
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2,
    0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 2, 0, 0, 1, 2, 1, 0, 1, 2, 2,
    0, 2, 0, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 2, 2, 1, 0, 2, 2, 2,
    1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 0, 2, 0, 1, 0, 2, 1, 1, 0, 2, 2,
    1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 1, 1, 2, 1, 1, 1, 2, 2,
    1, 2, 0, 0, 1, 2, 0, 1, 1, 2, 0, 2, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 2, 1, 1, 2, 2, 2,
    2, 0, 0, 0, 2, 0, 0, 1, 2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2, 2,
    2, 1, 0, 0, 2, 1, 0, 1, 2, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 2,
    2, 2, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, 2, 2, 2};

/* *********************************************************************************************
 */
/*  Table: ValTab21 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the quantized values for codebooks
 * 5-6.                */
/* ---------------------------------------------------------------------------------------------
 */
const int8_t aValTab21[162] = {
    -4, -4, -4, -3, -4, -2, -4, -1, -4, 0,  -4, 1,  -4, 2,  -4, 3,  -4, 4,  -3, -4, -3, -3, -3, -2, -3, -1, -3,
    0,  -3, 1,  -3, 2,  -3, 3,  -3, 4,  -2, -4, -2, -3, -2, -2, -2, -1, -2, 0,  -2, 1,  -2, 2,  -2, 3,  -2, 4,
    -1, -4, -1, -3, -1, -2, -1, -1, -1, 0,  -1, 1,  -1, 2,  -1, 3,  -1, 4,  0,  -4, 0,  -3, 0,  -2, 0,  -1, 0,
    0,  0,  1,  0,  2,  0,  3,  0,  4,  1,  -4, 1,  -3, 1,  -2, 1,  -1, 1,  0,  1,  1,  1,  2,  1,  3,  1,  4,
    2,  -4, 2,  -3, 2,  -2, 2,  -1, 2,  0,  2,  1,  2,  2,  2,  3,  2,  4,  3,  -4, 3,  -3, 3,  -2, 3,  -1, 3,
    0,  3,  1,  3,  2,  3,  3,  3,  4,  4,  -4, 4,  -3, 4,  -2, 4,  -1, 4,  0,  4,  1,  4,  2,  4,  3,  4,  4};

/* *********************************************************************************************
 */
/*  Table: ValTab22 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the quantized values for codebooks
 * 7-8.                */
/* ---------------------------------------------------------------------------------------------
 */
const int8_t aValTab22[128] = {0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4,
                               1, 5, 1, 6, 1, 7, 2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 3, 0, 3, 1,
                               3, 2, 3, 3, 3, 4, 3, 5, 3, 6, 3, 7, 4, 0, 4, 1, 4, 2, 4, 3, 4, 4, 4, 5, 4, 6,
                               4, 7, 5, 0, 5, 1, 5, 2, 5, 3, 5, 4, 5, 5, 5, 6, 5, 7, 6, 0, 6, 1, 6, 2, 6, 3,
                               6, 4, 6, 5, 6, 6, 6, 7, 7, 0, 7, 1, 7, 2, 7, 3, 7, 4, 7, 5, 7, 6, 7, 7};

/* *********************************************************************************************
 */
/*  Table: ValTab23 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the quantized values for codebooks
 * 9-10.               */
/* ---------------------------------------------------------------------------------------------
 */
const int8_t aValTab23[338] = {
    0,  0,  0,  1,  0,  2,  0,  3,  0,  4,  0,  5,  0,  6,  0,  7,  0,  8,  0,  9,  0,  10, 0,  11, 0,  12, 1,  0,  1,
    1,  1,  2,  1,  3,  1,  4,  1,  5,  1,  6,  1,  7,  1,  8,  1,  9,  1,  10, 1,  11, 1,  12, 2,  0,  2,  1,  2,  2,
    2,  3,  2,  4,  2,  5,  2,  6,  2,  7,  2,  8,  2,  9,  2,  10, 2,  11, 2,  12, 3,  0,  3,  1,  3,  2,  3,  3,  3,
    4,  3,  5,  3,  6,  3,  7,  3,  8,  3,  9,  3,  10, 3,  11, 3,  12, 4,  0,  4,  1,  4,  2,  4,  3,  4,  4,  4,  5,
    4,  6,  4,  7,  4,  8,  4,  9,  4,  10, 4,  11, 4,  12, 5,  0,  5,  1,  5,  2,  5,  3,  5,  4,  5,  5,  5,  6,  5,
    7,  5,  8,  5,  9,  5,  10, 5,  11, 5,  12, 6,  0,  6,  1,  6,  2,  6,  3,  6,  4,  6,  5,  6,  6,  6,  7,  6,  8,
    6,  9,  6,  10, 6,  11, 6,  12, 7,  0,  7,  1,  7,  2,  7,  3,  7,  4,  7,  5,  7,  6,  7,  7,  7,  8,  7,  9,  7,
    10, 7,  11, 7,  12, 8,  0,  8,  1,  8,  2,  8,  3,  8,  4,  8,  5,  8,  6,  8,  7,  8,  8,  8,  9,  8,  10, 8,  11,
    8,  12, 9,  0,  9,  1,  9,  2,  9,  3,  9,  4,  9,  5,  9,  6,  9,  7,  9,  8,  9,  9,  9,  10, 9,  11, 9,  12, 10,
    0,  10, 1,  10, 2,  10, 3,  10, 4,  10, 5,  10, 6,  10, 7,  10, 8,  10, 9,  10, 10, 10, 11, 10, 12, 11, 0,  11, 1,
    11, 2,  11, 3,  11, 4,  11, 5,  11, 6,  11, 7,  11, 8,  11, 9,  11, 10, 11, 11, 11, 12, 12, 0,  12, 1,  12, 2,  12,
    3,  12, 4,  12, 5,  12, 6,  12, 7,  12, 8,  12, 9,  12, 10, 12, 11, 12, 12};

/* *********************************************************************************************
 */
/*  Table: ValTab24 */
/* ---------------------------------------------------------------------------------------------
 */
/*    description:    This table contains the quantized values for codebooks 11.
 */
/* ---------------------------------------------------------------------------------------------
 */
const int8_t aValTab24[578] = {
    0,  0,  0,  1,  0,  2,  0,  3,  0,  4,  0,  5,  0,  6,  0,  7,  0,  8,  0,  9,  0,  10, 0,  11, 0,  12, 0,  13, 0,
    14, 0,  15, 0,  16, 1,  0,  1,  1,  1,  2,  1,  3,  1,  4,  1,  5,  1,  6,  1,  7,  1,  8,  1,  9,  1,  10, 1,  11,
    1,  12, 1,  13, 1,  14, 1,  15, 1,  16, 2,  0,  2,  1,  2,  2,  2,  3,  2,  4,  2,  5,  2,  6,  2,  7,  2,  8,  2,
    9,  2,  10, 2,  11, 2,  12, 2,  13, 2,  14, 2,  15, 2,  16, 3,  0,  3,  1,  3,  2,  3,  3,  3,  4,  3,  5,  3,  6,
    3,  7,  3,  8,  3,  9,  3,  10, 3,  11, 3,  12, 3,  13, 3,  14, 3,  15, 3,  16, 4,  0,  4,  1,  4,  2,  4,  3,  4,
    4,  4,  5,  4,  6,  4,  7,  4,  8,  4,  9,  4,  10, 4,  11, 4,  12, 4,  13, 4,  14, 4,  15, 4,  16, 5,  0,  5,  1,
    5,  2,  5,  3,  5,  4,  5,  5,  5,  6,  5,  7,  5,  8,  5,  9,  5,  10, 5,  11, 5,  12, 5,  13, 5,  14, 5,  15, 5,
    16, 6,  0,  6,  1,  6,  2,  6,  3,  6,  4,  6,  5,  6,  6,  6,  7,  6,  8,  6,  9,  6,  10, 6,  11, 6,  12, 6,  13,
    6,  14, 6,  15, 6,  16, 7,  0,  7,  1,  7,  2,  7,  3,  7,  4,  7,  5,  7,  6,  7,  7,  7,  8,  7,  9,  7,  10, 7,
    11, 7,  12, 7,  13, 7,  14, 7,  15, 7,  16, 8,  0,  8,  1,  8,  2,  8,  3,  8,  4,  8,  5,  8,  6,  8,  7,  8,  8,
    8,  9,  8,  10, 8,  11, 8,  12, 8,  13, 8,  14, 8,  15, 8,  16, 9,  0,  9,  1,  9,  2,  9,  3,  9,  4,  9,  5,  9,
    6,  9,  7,  9,  8,  9,  9,  9,  10, 9,  11, 9,  12, 9,  13, 9,  14, 9,  15, 9,  16, 10, 0,  10, 1,  10, 2,  10, 3,
    10, 4,  10, 5,  10, 6,  10, 7,  10, 8,  10, 9,  10, 10, 10, 11, 10, 12, 10, 13, 10, 14, 10, 15, 10, 16, 11, 0,  11,
    1,  11, 2,  11, 3,  11, 4,  11, 5,  11, 6,  11, 7,  11, 8,  11, 9,  11, 10, 11, 11, 11, 12, 11, 13, 11, 14, 11, 15,
    11, 16, 12, 0,  12, 1,  12, 2,  12, 3,  12, 4,  12, 5,  12, 6,  12, 7,  12, 8,  12, 9,  12, 10, 12, 11, 12, 12, 12,
    13, 12, 14, 12, 15, 12, 16, 13, 0,  13, 1,  13, 2,  13, 3,  13, 4,  13, 5,  13, 6,  13, 7,  13, 8,  13, 9,  13, 10,
    13, 11, 13, 12, 13, 13, 13, 14, 13, 15, 13, 16, 14, 0,  14, 1,  14, 2,  14, 3,  14, 4,  14, 5,  14, 6,  14, 7,  14,
    8,  14, 9,  14, 10, 14, 11, 14, 12, 14, 13, 14, 14, 14, 15, 14, 16, 15, 0,  15, 1,  15, 2,  15, 3,  15, 4,  15, 5,
    15, 6,  15, 7,  15, 8,  15, 9,  15, 10, 15, 11, 15, 12, 15, 13, 15, 14, 15, 15, 15, 16, 16, 0,  16, 1,  16, 2,  16,
    3,  16, 4,  16, 5,  16, 6,  16, 7,  16, 8,  16, 9,  16, 10, 16, 11, 16, 12, 16, 13, 16, 14, 16, 15, 16, 16};

/* cb    quant. val table */
const int8_t *aQuantTable[] = {aValTab41,
                               /* 0             -        */ /* use quant. val talble 1 as dummy here */
                               aValTab41,                   /* 1             1        */
                               aValTab41,                   /* 2             1        */
                               aValTab42,                   /* 3             2        */
                               aValTab42,                   /* 4             2        */
                               aValTab21,                   /* 5             3        */
                               aValTab21,                   /* 6             3        */
                               aValTab22,                   /* 7             4        */
                               aValTab22,                   /* 8             4        */
                               aValTab23,                   /* 9             5        */
                               aValTab23,                   /* 10            5        */
                               aValTab24,                   /* 11            6        */
                               aValTab41,
                               /* 12            -        */ /* use quant. val talble 1 as dummy here */
                               aValTab41,
                               /* 13            -        */ /* use quant. val talble 1 as dummy here */
                               aValTab41,
                               /* 14            -        */ /* use quant. val talble 1 as dummy here */
                               aValTab41,
                               /* 15            -        */ /* use quant. val talble 1 as dummy here */
                               aValTab24,                   /* 16            6        */
                               aValTab24,                   /* 17            6        */
                               aValTab24,                   /* 18            6        */
                               aValTab24,                   /* 19            6        */
                               aValTab24,                   /* 20            6        */
                               aValTab24,                   /* 21            6        */
                               aValTab24,                   /* 22            6        */
                               aValTab24,                   /* 23            6        */
                               aValTab24,                   /* 24            6        */
                               aValTab24,                   /* 25            6        */
                               aValTab24,                   /* 26            6        */
                               aValTab24,                   /* 27            6        */
                               aValTab24,                   /* 28            6        */
                               aValTab24,                   /* 29            6        */
                               aValTab24,                   /* 30            6        */
                               aValTab24};                  /* 31            6        */

/* arrays for HCR_TABLE_INFO structures */
/* maximum length of codeword in each codebook */
/* codebook:                     0,1, 2,3, 4, 5, 6, 7, 8, 9,
 * 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 */
const uint8_t aMaxCwLen[MAX_CB] = {0,  11, 9,  20, 16, 13, 11, 14, 12, 17, 14, 49, 0,  0,  0,  0,
                                   14, 17, 21, 21, 25, 25, 29, 29, 29, 29, 33, 33, 33, 37, 37, 41};

/*                                                           11  13  15  17  19
 * 21  23  25  27  39  31 */
/*                            CB:  0 1 2 3 4 5 6 7 8 9 10  12  14  16  18  20
 * 22  24  26  28  30       */
const uint8_t aDimCb[MAX_CB] = {2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
                                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; /* codebook dimension -
                                                                                      zero cb got a
                                                                                      dimension of 2 */

/*                                                           11  13  15  17  19
 * 21  23  25  27  39  31 */
/*                            CB:  0 1 2 3 4 5 6 7 8 9 10  12  14  16  18  20
 * 22  24  26  28  30       */
const uint8_t aDimCbShift[MAX_CB] = {1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; /* codebook dimension */

/*               1 -> decode sign bits */
/*               0 -> decode no sign bits                11  13  15  17  19  21
 * 23  25  27  39  31 */
/*                        CB:  0 1 2 3 4 5 6 7 8 9 10  12  14  16  18  20  22
 * 24  26  28  30       */
const uint8_t aSignCb[MAX_CB] = {0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

/* arrays for HCR_CB_PAIRS structures */
const uint8_t aMinOfCbPair[MAX_CB_PAIRS] = {0,  1,  3,  5,  7,  9,  16, 17, 18, 19, 20, 21,
                                            22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 11};
const uint8_t aMaxOfCbPair[MAX_CB_PAIRS] = {0,  2,  4,  6,  8,  10, 16, 17, 18, 19, 20, 21,
                                            22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 11};

/* priorities of codebooks */
const uint8_t aCbPriority[MAX_CB] = {0, 1, 1, 2, 2,  3,  3,  4,  4,  5,  5,  22, 0,  0,  0,  0,
                                     6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21};

const int8_t aCodebook2StartInt[] = {STOP_THIS_STATE,      /* cb  0 */
                                     BODY_ONLY,            /* cb  1 */
                                     BODY_ONLY,            /* cb  2 */
                                     BODY_SIGN__BODY,      /* cb  3 */
                                     BODY_SIGN__BODY,      /* cb  4 */
                                     BODY_ONLY,            /* cb  5 */
                                     BODY_ONLY,            /* cb  6 */
                                     BODY_SIGN__BODY,      /* cb  7 */
                                     BODY_SIGN__BODY,      /* cb  8 */
                                     BODY_SIGN__BODY,      /* cb  9 */
                                     BODY_SIGN__BODY,      /* cb 10 */
                                     BODY_SIGN_ESC__BODY,  /* cb 11 */
                                     STOP_THIS_STATE,      /* cb 12 */
                                     STOP_THIS_STATE,      /* cb 13 */
                                     STOP_THIS_STATE,      /* cb 14 */
                                     STOP_THIS_STATE,      /* cb 15 */
                                     BODY_SIGN_ESC__BODY,  /* cb 16 */
                                     BODY_SIGN_ESC__BODY,  /* cb 17 */
                                     BODY_SIGN_ESC__BODY,  /* cb 18 */
                                     BODY_SIGN_ESC__BODY,  /* cb 19 */
                                     BODY_SIGN_ESC__BODY,  /* cb 20 */
                                     BODY_SIGN_ESC__BODY,  /* cb 21 */
                                     BODY_SIGN_ESC__BODY,  /* cb 22 */
                                     BODY_SIGN_ESC__BODY,  /* cb 23 */
                                     BODY_SIGN_ESC__BODY,  /* cb 24 */
                                     BODY_SIGN_ESC__BODY,  /* cb 25 */
                                     BODY_SIGN_ESC__BODY,  /* cb 26 */
                                     BODY_SIGN_ESC__BODY,  /* cb 27 */
                                     BODY_SIGN_ESC__BODY,  /* cb 28 */
                                     BODY_SIGN_ESC__BODY,  /* cb 29 */
                                     BODY_SIGN_ESC__BODY,  /* cb 30 */
                                     BODY_SIGN_ESC__BODY}; /* cb 31 */

const STATEFUNC aStateConstant2State[] = {NULL,                                /*  0 = STOP_THIS_STATE           */
                                          Hcr_State_BODY_ONLY,                 /*  1 = BODY_ONLY                 */
                                          Hcr_State_BODY_SIGN__BODY,           /*  2 = BODY_SIGN__BODY           */
                                          Hcr_State_BODY_SIGN__SIGN,           /*  3 = BODY_SIGN__SIGN           */
                                          Hcr_State_BODY_SIGN_ESC__BODY,       /*  4 = BODY_SIGN_ESC__BODY       */
                                          Hcr_State_BODY_SIGN_ESC__SIGN,       /*  5 = BODY_SIGN_ESC__SIGN       */
                                          Hcr_State_BODY_SIGN_ESC__ESC_PREFIX, /*  6 = BODY_SIGN_ESC__ESC_PREFIX */
                                          Hcr_State_BODY_SIGN_ESC__ESC_WORD};  /*  7 = BODY_SIGN_ESC__ESC_WORD   */

/*                                     CB:  0 1 2 3 4 5 6 7 8  9 10      12
 * 14    16    18    20      22      24      26      28       30         */
const uint16_t aLargestAbsoluteValue[MAX_CB] = {0,    1,   1,   2,   2,   4,   4,   7,   7,    12,  12,
                                                8191, 0,   0,   0,   0,   15,  31,  47,  63,   95,  127,
                                                159,  191, 223, 255, 319, 383, 511, 767, 1023, 2047}; /* lav */
/*                                     CB:                           11     13
 * 15    17    19     21      23      25      27      39       31     */

/* ------------------------------------------------------------------------------------------
   description:    The table 'HuffTreeRvlcEscape' contains the decode tree for
the rvlc escape sequences. bit 23 and 11 not used bit 22 and 10 determine end
value  -->  if set codeword is decoded bit 21-12 and 9-0 (offset to next node)
or (index value) The escape sequence is the index value.

   input:          codeword
   output:         index
------------------------------------------------------------------------------------------
*/
const uint32_t aHuffTreeRvlcEscape[53] = {
    0x002001, 0x400003, 0x401004, 0x402005, 0x403007, 0x404006, 0x00a405, 0x009008, 0x00b406, 0x00c407, 0x00d408,
    0x00e409, 0x40b40a, 0x40c00f, 0x40d010, 0x40e011, 0x40f012, 0x410013, 0x411014, 0x412015, 0x016413, 0x414415,
    0x017416, 0x417018, 0x419019, 0x01a418, 0x01b41a, 0x01c023, 0x03201d, 0x01e020, 0x43501f, 0x41b41c, 0x021022,
    0x41d41e, 0x41f420, 0x02402b, 0x025028, 0x026027, 0x421422, 0x423424, 0x02902a, 0x425426, 0x427428, 0x02c02f,
    0x02d02e, 0x42942a, 0x42b42c, 0x030031, 0x42d42e, 0x42f430, 0x033034, 0x431432, 0x433434};

/* ------------------------------------------------------------------------------------------
   description:    The table 'HuffTreeRvlc' contains the huffman decoding tree
for the RVLC scale factors. The table contains 15 allowed, symmetric codewords
and 8 forbidden codewords, which are used for error detection.

   usage of bits:  bit 23 and 11 not used
                   bit 22 and 10 determine end value  -->  if set codeword is
decoded bit 21-12 and 9-0 (offset to next node within the table) or (index+7).
                   The decoded (index+7) is in the range from 0,1,..,22. If the
(index+7) is in the range 15,16,..,22, then a forbidden codeword is decoded.

   input:          A single bit from a RVLC scalefactor codeword
   output:         [if codeword is not completely decoded:] offset to next node
within table or [if codeword is decoded:] A dpcm value i.e. (index+7) in range
from 0,1,..,22. The differential scalefactor (DPCM value) named 'index' is
calculated by subtracting 7 from the decoded value (index+7).
------------------------------------------------------------------------------------------
*/
const uint32_t aHuffTreeRvlCodewds[22] = {
    0x407001, 0x002009, 0x003406, 0x004405, 0x005404, 0x006403, 0x007400, 0x008402, 0x411401, 0x00a408, 0x00c00b,
    0x00e409, 0x01000d, 0x40f40a, 0x41400f, 0x01340b, 0x011015, 0x410012, 0x41240c, 0x416014, 0x41540d, 0x41340e};

const FIXP_WTB LowDelaySynthesis256[768] = {
    -9491,  -9350,  -9207,  -9063,  -8917,  -8770,  -8622,  -8472,  -8321,  -8169,  -8015,  -7860,  -7704,  -7547,
    -7388,  -7229,  -7068,  -6906,  -6743,  -6579,  -6414,  -6249,  -6084,  -5918,  -5752,  -5585,  -5418,  -5251,
    -5083,  -4916,  -4749,  -4583,  -4419,  -4255,  -4093,  -3931,  -3771,  -3612,  -3455,  -3299,  -3144,  -2991,
    -2839,  -2690,  -2544,  -2401,  -2260,  -2123,  -1989,  -1857,  -1725,  -1595,  -1466,  -1336,  -1206,  -1077,
    -947,   -817,   -684,   -549,   -413,   -282,   -165,   -73,    0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      -16393, -16412, -16430, -16448, -16467, -16485, -16504, -16522, -16541, -16559, -16577, -16596,
    -16614, -16633, -16651, -16669, -16688, -16706, -16724, -16742, -16761, -16779, -16797, -16815, -16833, -16850,
    -16868, -16886, -16904, -16921, -16939, -16956, -16973, -16990, -17007, -17024, -17041, -17058, -17074, -17091,
    -17107, -17123, -17139, -17155, -17171, -17187, -17202, -17218, -17233, -17248, -17263, -17278, -17293, -17307,
    -17322, -17336, -17350, -17365, -17379, -17393, -17407, -17421, -17435, -17447, -17456, -17461, -17462, -17460,
    -17457, -17453, -17448, -17442, -17433, -17422, -17408, -17394, -17378, -17361, -17344, -17325, -17305, -17282,
    -17256, -17227, -17195, -17159, -17121, -17080, -17037, -16992, -16946, -16898, -16848, -16796, -16742, -16685,
    -16626, -16563, -16496, -16427, -16355, -16281, -16207, -16134, -16059, -15983, -15905, -15824, -15741, -15656,
    -15569, -15481, -15395, -15309, -15224, -15137, -15049, -14959, -14869, -14779, -14691, -14604, -14517, -14430,
    -14344, -14258, -14174, -14091, -19237, -19514, -19789, -20061, -20330, -20597, -20860, -21121, -21379, -21634,
    -21886, -22136, -22383, -22627, -22869, -23107, -23343, -23577, -23807, -24034, -24259, -24481, -24699, -24915,
    -25127, -25337, -25543, -25746, -25945, -26141, -26334, -26523, -26708, -26890, -27068, -27242, -27412, -27579,
    -27741, -27900, -28055, -28205, -28352, -28495, -28634, -28769, -28900, -29028, -29152, -29273, -29390, -29504,
    -29615, -29724, -29831, -29937, -30041, -30144, -30247, -30350, -30451, -30547, -30634, -30707, -30772, -30793,
    -30818, -30843, -30868, -30892, -30917, -30943, -30968, -30994, -31020, -31046, -31073, -31100, -31127, -31154,
    -31182, -31210, -31238, -31266, -31295, -31324, -31353, -31383, -31413, -31443, -31474, -31504, -31536, -31567,
    -31599, -31630, -31663, -31695, -31728, -31761, -31794, -31827, -31861, -31895, -31929, -31963, -31997, -32032,
    -32067, -32102, -32137, -32172, -32207, -32243, -32278, -32314, -32350, -32386, -32422, -32458, -32494, -32530,
    -32567, -32603, -32640, -32676, -32713, -32750, 2699,   2788,   2880,   2974,   3071,   3170,   3270,   3372,
    3476,   3582,   3689,   3799,   3910,   4024,   4139,   4255,   4373,   4491,   4611,   4731,   4852,   4974,
    5093,   5211,   5326,   5438,   5545,   5647,   5743,   5833,   5915,   5991,   6064,   6140,   6225,   6318,
    6418,   6527,   6642,   6765,   6895,   7031,   7174,   7323,   7478,   7640,   7808,   7984,   8167,   8359,
    8556,   8756,   8959,   9164,   9374,   9590,   9814,   10042,  10273,  10505,  10739,  10978,  11226,  11484,
    11750,  12022,  12295,  12563,  12827,  13089,  13354,  13630,  13921,  14223,  14532,  14840,  15141,  15432,
    15713,  15990,  16267,  16548,  16837,  17133,  17435,  17742,  18050,  18357,  18660,  18957,  19249,  19534,
    19816,  20095,  20372,  20650,  20928,  21208,  21490,  21773,  22055,  22331,  22599,  22857,  23108,  23355,
    23603,  23851,  24099,  24346,  24590,  24828,  25059,  25280,  25495,  25709,  25922,  26135,  26345,  26548,
    26744,  26936,  27123,  27308,  27489,  27666,  27838,  28006,  -20956, -20408, -19870, -19341, -18819, -18305,
    -17796, -17294, -16798, -16309, -15826, -15350, -14882, -14420, -13966, -13519, -13079, -12647, -12222, -11804,
    -11394, -10991, -10596, -10208, -9828,  -9454,  -9088,  -8730,  -8379,  -8035,  -7699,  -7369,  -7047,  -6732,
    -6424,  -6123,  -5830,  -5543,  -5263,  -4990,  -4724,  -4465,  -4213,  -3968,  -3729,  -3497,  -3270,  -3050,
    -2835,  -2628,  -2426,  -2233,  -2046,  -1866,  -1692,  -1524,  -1361,  -1204,  -1054,  -909,   -770,   -636,
    -508,   -387,   -272,   -163,   -57,    46,     146,    243,    333,    414,    485,    548,    605,    660,
    716,    773,    830,    884,    932,    975,    1009,   1037,   1058,   1075,   1089,   1100,   1111,   1121,
    1130,   1138,   1144,   1148,   1148,   1143,   1134,   1121,   1104,   1085,   1065,   1044,   1023,   1001,
    977,    951,    923,    891,    857,    821,    784,    747,    709,    670,    630,    588,    545,    501,
    456,    410,    363,    316,    268,    220,    172,    123,    74,     25,     -10719, -10929, -11136, -11341,
    -11542, -11742, -11939, -12132, -12322, -12509, -12694, -12876, -13053, -13228, -13402, -13576, -13749, -13924,
    -14100, -14275, -14452, -14634, -14825, -15029, -15249, -15488, -15748, -16034, -16347, -16692, -17068, -17477,
    -17904, -18317, -18701, -19055, -19380, -19676, -19945, -20187, -20402, -20590, -20753, -20891, -21005, -21094,
    -21160, -21203, -21224, -21223, -21201, -21159, -21096, -21014, -20913, -20794, -20656, -20502, -20331, -20143,
    -19940, -19722, -19490, -19243, -18983, -18711, -18426, -18129, -17822, -17503, -17175, -16837, -16491, -16136,
    -15773, -15403, -15026, -14643, -14255, -13861, -13464, -13062, -12657, -12249, -11839, -11427, -11014, -10601,
    -10187, -9775,  -9363,  -8953,  -8545,  -8140,  -7739,  -7341,  -6948,  -6559,  -6177,  -5800,  -5430,  -5068,
    -4713,  -4367,  -4029,  -3701,  -3383,  -3076,  -2780,  -2496,  -2223,  -1964,  -1718,  -1486,  -1268,  -1066,
    -879,   -708,   -554,   -418,   -299,   -199,   -117,   -55,    -13,    8,      8,      -14,
};

const FIXP_WTB LowDelaySynthesis240[720] = {
    -9487,  -9335,  -9183,  -9029,  -8873,  -8716,  -8557,  -8397,  -8235,  -8072,  -7907,  -7740,  -7573,  -7404,
    -7234,  -7063,  -6890,  -6716,  -6541,  -6365,  -6189,  -6012,  -5835,  -5658,  -5480,  -5301,  -5122,  -4944,
    -4766,  -4589,  -4413,  -4239,  -4066,  -3894,  -3723,  -3554,  -3387,  -3221,  -3057,  -2894,  -2735,  -2578,
    -2424,  -2274,  -2128,  -1985,  -1843,  -1704,  -1565,  -1427,  -1288,  -1150,  -1012,  -873,   -733,   -590,
    -445,   -303,   -175,   -76,    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      -16394, -16413, -16433, -16453, -16472, -16492,
    -16512, -16531, -16551, -16571, -16590, -16610, -16630, -16649, -16669, -16688, -16708, -16727, -16747, -16766,
    -16785, -16804, -16824, -16843, -16862, -16881, -16900, -16918, -16937, -16955, -16974, -16992, -17010, -17028,
    -17046, -17064, -17081, -17099, -17116, -17133, -17150, -17167, -17184, -17201, -17217, -17233, -17249, -17265,
    -17281, -17297, -17313, -17328, -17343, -17359, -17374, -17389, -17403, -17418, -17433, -17447, -17456, -17461,
    -17462, -17460, -17456, -17452, -17446, -17438, -17427, -17414, -17398, -17382, -17364, -17346, -17326, -17304,
    -17280, -17252, -17220, -17184, -17145, -17103, -17058, -17012, -16963, -16912, -16860, -16805, -16748, -16687,
    -16623, -16556, -16485, -16410, -16333, -16254, -16175, -16097, -16017, -15934, -15849, -15761, -15670, -15577,
    -15484, -15392, -15300, -15209, -15117, -15022, -14926, -14830, -14735, -14642, -14549, -14456, -14364, -14272,
    -14182, -14093, -19246, -19542, -19835, -20124, -20411, -20694, -20973, -21250, -21524, -21794, -22061, -22325,
    -22587, -22845, -23099, -23351, -23600, -23845, -24087, -24326, -24561, -24793, -25022, -25246, -25468, -25685,
    -25899, -26109, -26315, -26516, -26714, -26908, -27097, -27282, -27462, -27639, -27810, -27978, -28140, -28299,
    -28453, -28602, -28747, -28888, -29024, -29156, -29285, -29409, -29530, -29648, -29764, -29877, -29989, -30099,
    -30210, -30319, -30428, -30531, -30626, -30705, -30772, -30795, -30822, -30849, -30875, -30901, -30928, -30955,
    -30983, -31010, -31038, -31067, -31095, -31124, -31153, -31183, -31212, -31242, -31273, -31304, -31335, -31366,
    -31398, -31430, -31462, -31495, -31528, -31562, -31595, -31629, -31664, -31698, -31733, -31768, -31804, -31840,
    -31875, -31912, -31948, -31985, -32021, -32059, -32096, -32133, -32171, -32208, -32246, -32284, -32322, -32360,
    -32399, -32437, -32476, -32514, -32553, -32592, -32631, -32670, -32709, -32748, 2701,   2797,   2895,   2997,
    3100,   3206,   3314,   3424,   3536,   3649,   3766,   3884,   4005,   4127,   4251,   4377,   4503,   4631,
    4759,   4889,   5018,   5145,   5269,   5390,   5506,   5617,   5721,   5818,   5908,   5989,   6066,   6148,
    6240,   6341,   6450,   6568,   6695,   6829,   6971,   7121,   7278,   7441,   7612,   7791,   7978,   8174,
    8378,   8589,   8803,   9020,   9240,   9466,   9701,   9943,   10188,  10435,  10684,  10938,  11201,  11475,
    11759,  12049,  12340,  12625,  12906,  13185,  13472,  13774,  14091,  14418,  14748,  15072,  15384,  15685,
    15980,  16276,  16577,  16886,  17203,  17527,  17855,  18183,  18509,  18829,  19142,  19449,  19751,  20049,
    20345,  20641,  20937,  21236,  21537,  21839,  22139,  22431,  22712,  22983,  23248,  23512,  23776,  24041,
    24305,  24565,  24820,  25066,  25302,  25531,  25759,  25986,  26213,  26434,  26647,  26853,  27055,  27253,
    27447,  27636,  27821,  28001,  -20938, -20354, -19781, -19218, -18664, -18117, -17578, -17045, -16520, -16002,
    -15492, -14990, -14497, -14011, -13534, -13065, -12604, -12152, -11708, -11273, -10846, -10427, -10017, -9615,
    -9222,  -8837,  -8460,  -8092,  -7732,  -7380,  -7036,  -6701,  -6374,  -6054,  -5743,  -5440,  -5144,  -4857,
    -4577,  -4305,  -4041,  -3784,  -3535,  -3292,  -3057,  -2828,  -2607,  -2394,  -2188,  -1991,  -1802,  -1618,
    -1441,  -1271,  -1108,  -952,   -802,   -658,   -521,   -391,   -269,   -152,   -40,    70,     176,    277,
    370,    451,    522,    585,    644,    703,    763,    824,    882,    934,    978,    1014,   1042,   1064,
    1080,   1094,   1106,   1116,   1127,   1136,   1143,   1147,   1148,   1143,   1134,   1120,   1101,   1081,
    1058,   1036,   1013,   989,    963,    934,    901,    865,    827,    788,    748,    708,    666,    623,
    578,    532,    484,    436,    387,    337,    286,    235,    183,    131,    79,     26,     -10727, -10950,
    -11171, -11388, -11602, -11814, -12023, -12227, -12428, -12627, -12822, -13012, -13199, -13385, -13570, -13755,
    -13941, -14129, -14316, -14506, -14703, -14912, -15137, -15382, -15650, -15945, -16272, -16632, -17029, -17463,
    -17918, -18357, -18762, -19133, -19472, -19778, -20053, -20298, -20512, -20696, -20852, -20980, -21081, -21154,
    -21202, -21225, -21222, -21196, -21146, -21074, -20979, -20864, -20727, -20571, -20395, -20201, -19989, -19759,
    -19514, -19252, -18975, -18683, -18377, -18059, -17727, -17384, -17030, -16665, -16291, -15907, -15515, -15115,
    -14708, -14294, -13875, -13450, -13022, -12589, -12153, -11715, -11276, -10835, -10394, -9953,  -9514,  -9076,
    -8640,  -8207,  -7779,  -7354,  -6935,  -6521,  -6114,  -5713,  -5321,  -4937,  -4562,  -4197,  -3842,  -3499,
    -3167,  -2848,  -2542,  -2250,  -1972,  -1710,  -1464,  -1234,  -1021,  -826,   -650,   -493,   -356,   -240,
    -145,   -72,    -21,    6,      9,      -13,
};

const FIXP_WTB LowDelaySynthesis160[480] = {
    -9449,  -9221,  -8990,  -8755,  -8517,  -8276,  -8031,  -7782,  -7531,  -7277,  -7019,  -6759,  -6497,  -6233,
    -5968,  -5702,  -5435,  -5167,  -4899,  -4633,  -4369,  -4109,  -3851,  -3597,  -3345,  -3098,  -2854,  -2617,
    -2386,  -2164,  -1949,  -1738,  -1530,  -1323,  -1115,  -908,   -698,   -481,   -270,   -97,    0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      -16399, -16428, -16458, -16487,
    -16517, -16546, -16576, -16605, -16634, -16664, -16693, -16722, -16751, -16780, -16809, -16838, -16867, -16895,
    -16923, -16951, -16978, -17006, -17033, -17059, -17086, -17112, -17138, -17163, -17188, -17213, -17237, -17261,
    -17285, -17309, -17332, -17355, -17377, -17400, -17422, -17444, -17458, -17462, -17459, -17453, -17444, -17430,
    -17410, -17386, -17360, -17331, -17298, -17259, -17211, -17155, -17092, -17023, -16950, -16873, -16791, -16703,
    -16607, -16503, -16391, -16274, -16156, -16037, -15913, -15783, -15647, -15508, -15369, -15232, -15093, -14950,
    -14806, -14665, -14526, -14387, -14250, -14115, -19320, -19762, -20196, -20623, -21043, -21455, -21861, -22260,
    -22651, -23036, -23414, -23784, -24147, -24503, -24851, -25191, -25522, -25846, -26161, -26466, -26763, -27050,
    -27327, -27595, -27853, -28100, -28338, -28565, -28782, -28990, -29189, -29378, -29560, -29735, -29905, -30072,
    -30237, -30401, -30556, -30687, -30778, -30815, -30855, -30895, -30935, -30976, -31017, -31060, -31102, -31146,
    -31190, -31235, -31281, -31327, -31374, -31422, -31471, -31520, -31570, -31621, -31672, -31724, -31777, -31831,
    -31884, -31939, -31994, -32049, -32105, -32161, -32218, -32275, -32332, -32389, -32447, -32505, -32563, -32621,
    -32680, -32739, 2725,   2871,   3023,   3180,   3341,   3507,   3678,   3854,   4035,   4220,   4408,   4599,
    4792,   4986,   5176,   5360,   5534,   5696,   5841,   5969,   6086,   6216,   6367,   6538,   6728,   6935,
    7159,   7400,   7656,   7930,   8224,   8536,   8857,   9185,   9524,   9882,   10250,  10621,  11002,  11405,
    11831,  12267,  12695,  13115,  13546,  14010,  14501,  14992,  15460,  15907,  16350,  16808,  17284,  17773,
    18265,  18749,  19220,  19676,  20123,  20567,  21012,  21461,  21914,  22359,  22781,  23182,  23578,  23975,
    24370,  24757,  25126,  25474,  25816,  26156,  26488,  26802,  27105,  27399,  27683,  27956,  -20791, -19923,
    -19079, -18254, -17444, -16650, -15874, -15115, -14374, -13652, -12949, -12264, -11598, -10952, -10324, -9715,
    -9125,  -8554,  -8001,  -7467,  -6952,  -6455,  -5976,  -5515,  -5071,  -4646,  -4238,  -3848,  -3474,  -3115,
    -2772,  -2446,  -2138,  -1848,  -1574,  -1313,  -1069,  -839,   -623,   -423,   -239,   -68,    97,     253,
    391,    505,    600,    688,    779,    868,    946,    1006,   1048,   1077,   1097,   1114,   1129,   1142,
    1148,   1145,   1131,   1106,   1075,   1042,   1008,   970,    926,    874,    817,    758,    698,    634,
    567,    496,    424,    349,    273,    196,    118,    39,     -10783, -11116, -11442, -11762, -12074, -12378,
    -12676, -12965, -13246, -13524, -13801, -14082, -14363, -14653, -14967, -15319, -15721, -16187, -16728, -17351,
    -18031, -18664, -19221, -19705, -20117, -20461, -20738, -20951, -21102, -21193, -21226, -21205, -21130, -21005,
    -20831, -20612, -20348, -20044, -19700, -19319, -18903, -18455, -17977, -17471, -16940, -16385, -15810, -15215,
    -14605, -13980, -13343, -12697, -12044, -11386, -10725, -10064, -9404,  -8749,  -8100,  -7460,  -6831,  -6215,
    -5614,  -5032,  -4470,  -3930,  -3415,  -2927,  -2468,  -2040,  -1647,  -1290,  -971,   -692,   -457,   -267,
    -124,   -32,    9,      -5,
};

const FIXP_WTB LowDelaySynthesis128[384] = {
    -9421,  -9135,  -8844,  -8547,  -8245,  -7938,  -7625,  -7309,  -6987,  -6661,  -6332,  -6001,  -5669,  -5335,
    -4999,  -4666,  -4337,  -4012,  -3692,  -3377,  -3067,  -2764,  -2472,  -2192,  -1923,  -1660,  -1401,  -1141,
    -882,   -617,   -347,   -115,   0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      -16402, -16439, -16476, -16513, -16550, -16587,
    -16623, -16660, -16697, -16733, -16770, -16806, -16842, -16877, -16912, -16947, -16982, -17016, -17049, -17083,
    -17115, -17147, -17179, -17210, -17240, -17270, -17300, -17329, -17358, -17386, -17414, -17441, -17459, -17461,
    -17455, -17445, -17428, -17401, -17370, -17335, -17294, -17242, -17177, -17100, -17015, -16922, -16822, -16714,
    -16594, -16462, -16318, -16170, -16022, -15865, -15699, -15525, -15352, -15181, -15004, -14824, -14648, -14473,
    -14301, -14132, -19376, -19926, -20464, -20991, -21507, -22011, -22505, -22988, -23460, -23921, -24370, -24808,
    -25233, -25645, -26044, -26429, -26799, -27155, -27496, -27821, -28130, -28424, -28702, -28965, -29213, -29447,
    -29670, -29884, -30093, -30299, -30500, -30673, -30782, -30830, -30880, -30930, -30981, -31033, -31086, -31140,
    -31196, -31252, -31309, -31368, -31428, -31489, -31551, -31614, -31679, -31744, -31811, -31878, -31946, -32015,
    -32084, -32154, -32225, -32296, -32368, -32440, -32512, -32585, -32658, -32731, 2743,   2927,   3120,   3321,
    3528,   3744,   3967,   4197,   4432,   4671,   4913,   5153,   5383,   5597,   5789,   5954,   6101,   6270,
    6472,   6703,   6962,   7248,   7558,   7895,   8262,   8656,   9061,   9481,   9928,   10389,  10858,  11353,
    11886,  12430,  12958,  13491,  14070,  14687,  15288,  15851,  16407,  16984,  17588,  18204,  18809,  19392,
    19956,  20511,  21068,  21631,  22194,  22730,  23232,  23727,  24222,  24710,  25171,  25602,  26029,  26447,
    26841,  27216,  27578,  27923,  -20681, -19604, -18561, -17544, -16552, -15587, -14650, -13741, -12862, -12012,
    -11192, -10401, -9640,  -8908,  -8206,  -7533,  -6889,  -6273,  -5685,  -5126,  -4594,  -4090,  -3612,  -3159,
    -2731,  -2329,  -1955,  -1607,  -1282,  -981,   -702,   -447,   -217,   -6,     195,    375,    518,    633,
    744,    857,    954,    1024,   1067,   1095,   1116,   1134,   1147,   1146,   1128,   1095,   1054,   1012,
    965,    907,    839,    766,    690,    609,    523,    433,    340,    244,    147,    49,     -10825, -11239,
    -11642, -12036, -12416, -12786, -13141, -13489, -13836, -14187, -14542, -14926, -15366, -15888, -16515, -17269,
    -18114, -18881, -19532, -20069, -20499, -20825, -21052, -21184, -21226, -21183, -21058, -20856, -20581, -20239,
    -19833, -19368, -18849, -18279, -17664, -17007, -16314, -15589, -14835, -14059, -13263, -12453, -11633, -10808,
    -9981,  -9158,  -8342,  -7539,  -6753,  -5988,  -5248,  -4539,  -3864,  -3228,  -2636,  -2092,  -1600,  -1165,
    -792,   -484,   -246,   -84,    0,      0,
};

const FIXP_WTB LowDelaySynthesis120[360] = {
    -9411,  -9106,  -8795,  -8477,  -8153,  -7824,  -7489,  -7149,  -6803,  -6453,  -6100,  -5746,  -5390,  -5033,
    -4677,  -4326,  -3979,  -3639,  -3304,  -2975,  -2656,  -2349,  -2056,  -1773,  -1496,  -1219,  -943,   -662,
    -373,   -121,   0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      -16404, -16443, -16482, -16522, -16561, -16600, -16639, -16678, -16717, -16756,
    -16795, -16833, -16871, -16909, -16946, -16983, -17019, -17055, -17090, -17125, -17159, -17192, -17225, -17257,
    -17289, -17320, -17351, -17381, -17411, -17440, -17459, -17461, -17454, -17442, -17421, -17390, -17355, -17315,
    -17266, -17203, -17125, -17035, -16938, -16833, -16718, -16590, -16448, -16294, -16136, -15976, -15805, -15624,
    -15438, -15255, -15070, -14878, -14688, -14502, -14318, -14137, -19394, -19980, -20553, -21112, -21659, -22194,
    -22716, -23226, -23723, -24207, -24678, -25134, -25577, -26004, -26416, -26811, -27190, -27551, -27895, -28220,
    -28528, -28818, -29091, -29347, -29590, -29821, -30044, -30265, -30480, -30668, -30783, -30835, -30888, -30942,
    -30997, -31052, -31110, -31168, -31227, -31288, -31350, -31414, -31479, -31545, -31612, -31681, -31751, -31822,
    -31894, -31966, -32040, -32114, -32189, -32265, -32341, -32418, -32495, -32573, -32651, -32729, 2749,   2946,
    3153,   3368,   3592,   3825,   4066,   4314,   4567,   4824,   5082,   5330,   5562,   5771,   5949,   6106,
    6289,   6508,   6761,   7045,   7359,   7700,   8075,   8483,   8911,   9352,   9821,   10312,  10810,  11336,
    11904,  12483,  13045,  13621,  14254,  14911,  15536,  16128,  16731,  17364,  18019,  18670,  19297,  19900,
    20493,  21086,  21688,  22286,  22849,  23380,  23909,  24436,  24944,  25417,  25873,  26324,  26751,  27154,
    27542,  27912,  -20644, -19499, -18390, -17310, -16260, -15240, -14253, -13298, -12377, -11489, -10635, -9815,
    -9028,  -8275,  -7555,  -6868,  -6213,  -5590,  -4999,  -4440,  -3912,  -3413,  -2942,  -2499,  -2089,  -1709,
    -1355,  -1029,  -729,   -455,   -210,   15,     227,    412,    554,    673,    794,    909,    997,    1054,
    1087,   1111,   1132,   1146,   1146,   1127,   1091,   1047,   1002,   949,    883,    808,    728,    645,
    555,    460,    362,    260,    157,    53,     -10839, -11280, -11709, -12126, -12528, -12917, -13292, -13662,
    -14035, -14410, -14806, -15257, -15794, -16447, -17242, -18141, -18952, -19629, -20179, -20608, -20920, -21121,
    -21216, -21212, -21113, -20924, -20651, -20300, -19876, -19385, -18830, -18220, -17557, -16849, -16100, -15316,
    -14502, -13663, -12806, -11935, -11056, -10174, -9295,  -8423,  -7566,  -6727,  -5913,  -5128,  -4378,  -3669,
    -3006,  -2394,  -1839,  -1347,  -921,   -569,   -295,   -105,   -5,     1,
};

const FIXP_WTB LowDelaySynthesis512[1536] = {
    /* part 0 */
    -9526, -9456, -9385, -9314, -9243, -9171, -9099, -9026, -8953, -8880, -8807, -8733, -8659, -8584, -8510, -8434,
    -8359, -8283, -8207, -8131, -8054, -7976, -7899, -7821, -7743, -7665, -7586, -7507, -7428, -7349, -7269, -7189,
    -7108, -7028, -6947, -6865, -6784, -6702, -6620, -6538, -6456, -6373, -6291, -6208, -6125, -6042, -5960, -5877,
    -5794, -5710, -5627, -5544, -5460, -5377, -5293, -5209, -5125, -5041, -4957, -4874, -4791, -4708, -4625, -4542,
    -4460, -4378, -4296, -4214, -4133, -4052, -3971, -3891, -3811, -3731, -3652, -3573, -3494, -3416, -3338, -3260,
    -3182, -3105, -3029, -2952, -2877, -2802, -2727, -2653, -2580, -2508, -2436, -2365, -2295, -2226, -2157, -2090,
    -2022, -1956, -1890, -1824, -1758, -1693, -1628, -1563, -1498, -1433, -1368, -1304, -1239, -1174, -1109, -1044,
    -979, -914, -849, -784, -718, -651, -583, -515, -447, -380, -314, -251, -192, -139, -93, -56, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -16389, -16398, -16407, -16416, -16425, -16435, -16444, -16453, -16462, -16472, -16481, -16490, -16499,
    -16508, -16518, -16527, -16536, -16545, -16554, -16564, -16573, -16582, -16591, -16600, -16610, -16619, -16628,
    -16637, -16646, -16656, -16665, -16674, -16683, -16692, -16701, -16710, -16720, -16729, -16738, -16747, -16756,
    -16765, -16774, -16783, -16792, -16801, -16810, -16819, -16828, -16837, -16846, -16855, -16864, -16873, -16882,
    -16890, -16899, -16908, -16917, -16926, -16934, -16943, -16952, -16960, -16969, -16978, -16986, -16995, -17003,
    -17012, -17020, -17029, -17037, -17045, -17054, -17062, -17070, -17078, -17087, -17095, -17103, -17111, -17119,
    -17127, -17135, -17143, -17151, -17159, -17167, -17175, -17183, -17191, -17198, -17206, -17214, -17221, -17229,
    -17237, -17244, -17252, -17259, -17267, -17274, -17282, -17289, -17296, -17304, -17311, -17318, -17325, -17333,
    -17340, -17347, -17354, -17361, -17368, -17375, -17382, -17389, -17396, -17403, -17410, -17417, -17424, -17431,
    -17438, -17444, -17449, -17454, -17457, -17460, -17461, -17462, -17461, -17461, -17459, -17458, -17456, -17454,
    -17452, -17450, -17447, -17444, -17440, -17435, -17430, -17425, -17419, -17412, -17405, -17397, -17390, -17382,
    -17374, -17365, -17357, -17348, -17339, -17330, -17320, -17310, -17300, -17288, -17276, -17263, -17249, -17235,
    -17220, -17203, -17186, -17168, -17150, -17130, -17111, -17090, -17069, -17048, -17026, -17003, -16981, -16957,
    -16934, -16910, -16885, -16861, -16835, -16809, -16783, -16756, -16728, -16700, -16671, -16641, -16610, -16579,
    -16546, -16513, -16479, -16445, -16409, -16373, -16336, -16300, -16263, -16226, -16189, -16152, -16115, -16078,
    -16041, -16003, -15964, -15925, -15885, -15845, -15804, -15762, -15720, -15677, -15634, -15591, -15547, -15503,
    -15460, -15416, -15373, -15330, -15288, -15245, -15202, -15159, -15115, -15071, -15026, -14982, -14936, -14891,
    -14846, -14802, -14757, -14713, -14669, -14626, -14582, -14539, -14495, -14452, -14408, -14365, -14322, -14280,
    -14237, -14195, -14153, -14111, -14070,
    /* part 1 */
    -19167, -19306, -19445, -19583, -19721, -19858, -19994, -20129, -20263, -20397, -20530, -20663, -20795, -20926,
    -21056, -21185, -21314, -21443, -21570, -21697, -21823, -21949, -22074, -22198, -22321, -22444, -22566, -22688,
    -22808, -22928, -23048, -23167, -23285, -23402, -23518, -23634, -23750, -23864, -23978, -24091, -24203, -24315,
    -24426, -24536, -24645, -24754, -24861, -24968, -25075, -25180, -25285, -25389, -25492, -25594, -25695, -25796,
    -25896, -25994, -26092, -26190, -26286, -26381, -26476, -26569, -26662, -26754, -26845, -26934, -27023, -27111,
    -27199, -27285, -27370, -27454, -27537, -27620, -27701, -27781, -27861, -27939, -28016, -28093, -28168, -28242,
    -28316, -28388, -28460, -28530, -28600, -28668, -28736, -28802, -28868, -28933, -28997, -29059, -29121, -29183,
    -29243, -29302, -29361, -29419, -29476, -29532, -29588, -29643, -29697, -29751, -29805, -29858, -29910, -29963,
    -30015, -30067, -30118, -30170, -30222, -30273, -30324, -30376, -30426, -30476, -30524, -30570, -30613, -30654,
    -30690, -30722, -30767, -30777, -30787, -30799, -30811, -30824, -30837, -30849, -30861, -30874, -30886, -30898,
    -30911, -30924, -30936, -30949, -30962, -30975, -30988, -31001, -31014, -31027, -31040, -31053, -31066, -31080,
    -31093, -31106, -31120, -31134, -31147, -31161, -31175, -31189, -31203, -31217, -31231, -31245, -31259, -31273,
    -31288, -31302, -31317, -31331, -31346, -31361, -31376, -31390, -31405, -31420, -31436, -31451, -31466, -31481,
    -31497, -31512, -31528, -31543, -31559, -31575, -31591, -31606, -31622, -31638, -31655, -31671, -31687, -31703,
    -31720, -31736, -31752, -31769, -31786, -31802, -31819, -31836, -31852, -31869, -31886, -31903, -31920, -31937,
    -31954, -31971, -31989, -32006, -32023, -32041, -32058, -32075, -32093, -32110, -32128, -32145, -32163, -32181,
    -32198, -32216, -32234, -32251, -32269, -32287, -32305, -32323, -32341, -32359, -32377, -32395, -32413, -32431,
    -32449, -32467, -32485, -32503, -32521, -32539, -32557, -32576, -32594, -32612, -32630, -32649, -32667, -32685,
    -32704, -32722, -32740, -32759, 2677, 2721, 2765, 2811, 2857, 2903, 2951, 2998, 3047, 3096, 3145, 3194, 3245, 3295,
    3346, 3398, 3450, 3502, 3555, 3608, 3662, 3716, 3771, 3826, 3882, 3939, 3995, 4052, 4110, 4168, 4226, 4285, 4343,
    4402, 4462, 4521, 4581, 4641, 4701, 4761, 4822, 4883, 4943, 5004, 5064, 5123, 5182, 5240, 5298, 5355, 5410, 5465,
    5519, 5571, 5622, 5671, 5720, 5766, 5811, 5854, 5895, 5935, 5973, 6009, 6045, 6082, 6120, 6161, 6203, 6248, 6294,
    6342, 6393, 6445, 6499, 6555, 6613, 6672, 6734, 6797, 6862, 6928, 6996, 7066, 7138, 7211, 7285, 7361, 7439, 7518,
    7599, 7681, 7765, 7851, 7939, 8029, 8121, 8214, 8310, 8407, 8506, 8606, 8706, 8807, 8908, 9010, 9113, 9216, 9321,
    9427, 9535, 9646, 9757, 9871, 9985, 10100, 10215, 10331, 10447, 10563, 10680, 10798, 10918, 11039, 11163, 11289,
    11418, 11550, 11683, 11818, 11954, 12090, 12227, 12362, 12496, 12629, 12761, 12892, 13023, 13155, 13287, 13422,
    13560, 13702, 13847, 13995, 14146, 14300, 14455, 14610, 14764, 14916, 15067, 15215, 15360, 15503, 15643, 15782,
    15920, 16059, 16197, 16336, 16477, 16620, 16764, 16911, 17059, 17208, 17359, 17512, 17665, 17819, 17973, 18127,
    18280, 18433, 18584, 18735, 18883, 19030, 19176, 19320, 19463, 19605, 19746, 19886, 20025, 20164, 20303, 20442,
    20580, 20719, 20858, 20998, 21138, 21278, 21419, 21560, 21702, 21844, 21985, 22125, 22263, 22399, 22533, 22665,
    22794, 22921, 23046, 23170, 23294, 23417, 23541, 23665, 23789, 23913, 24037, 24161, 24284, 24407, 24529, 24650,
    24769, 24886, 25002, 25115, 25226, 25334, 25442, 25549, 25655, 25762, 25869, 25976, 26082, 26188, 26293, 26396,
    26498, 26597, 26696, 26793, 26888, 26983, 27077, 27170, 27262, 27353, 27444, 27533, 27622, 27709, 27796, 27881,
    27965, 28048,
    /* part 2 */
    -21095, -20818, -20544, -20273, -20004, -19737, -19472, -19210, -18949, -18690, -18433, -18177, -17923, -17670,
    -17419, -17169, -16921, -16675, -16430, -16187, -15946, -15706, -15469, -15233, -14998, -14766, -14535, -14306,
    -14079, -13853, -13630, -13408, -13188, -12970, -12754, -12540, -12327, -12117, -11908, -11701, -11496, -11293,
    -11091, -10892, -10694, -10498, -10304, -10112, -9922, -9734, -9547, -9362, -9179, -8998, -8819, -8642, -8466,
    -8292, -8120, -7950, -7782, -7615, -7451, -7288, -7127, -6968, -6810, -6655, -6501, -6348, -6198, -6049, -5902,
    -5757, -5614, -5472, -5332, -5194, -5058, -4923, -4790, -4659, -4530, -4402, -4276, -4151, -4029, -3908, -3788,
    -3670, -3554, -3439, -3326, -3214, -3104, -2996, -2888, -2783, -2679, -2577, -2476, -2377, -2280, -2185, -2092,
    -2000, -1910, -1822, -1735, -1649, -1565, -1482, -1401, -1321, -1243, -1166, -1091, -1017, -945, -874, -804, -736,
    -669, -603, -539, -477, -417, -358, -301, -245, -190, -136, -84, -31, 20, 71, 122, 171, 219, 266, 312, 355, 395,
    433, 468, 502, 533, 563, 591, 619, 647, 674, 702, 730, 759, 787, 816, 844, 871, 896, 921, 944, 965, 984, 1001, 1017,
    1031, 1043, 1053, 1063, 1071, 1079, 1085, 1092, 1097, 1103, 1108, 1113, 1118, 1123, 1128, 1132, 1136, 1140, 1143,
    1146, 1147, 1148, 1148, 1147, 1145, 1141, 1137, 1131, 1125, 1117, 1109, 1100, 1090, 1080, 1070, 1060, 1049, 1039,
    1028, 1017, 1006, 995, 983, 971, 958, 945, 930, 915, 899, 883, 865, 848, 830, 812, 794, 775, 756, 738, 719, 699,
    680, 660, 640, 620, 599, 578, 556, 534, 512, 489, 467, 444, 421, 398, 375, 352, 328, 304, 280, 256, 232, 208, 184,
    159, 135, 111, 86, 61, 37, 13, -10667, -10772, -10877, -10981, -11085, -11188, -11290, -11391, -11492, -11592,
    -11692, -11791, -11890, -11987, -12084, -12180, -12275, -12369, -12463, -12556, -12649, -12740, -12831, -12920,
    -13009, -13097, -13185, -13272, -13359, -13446, -13532, -13619, -13706, -13793, -13880, -13968, -14056, -14144,
    -14231, -14319, -14407, -14497, -14588, -14681, -14776, -14875, -14977, -15083, -15193, -15307, -15426, -15551,
    -15681, -15817, -15960, -16109, -16266, -16430, -16602, -16783, -16971, -17167, -17372, -17584, -17797, -18010,
    -18216, -18416, -18607, -18792, -18969, -19139, -19301, -19457, -19605, -19746, -19881, -20008, -20129, -20243,
    -20350, -20451, -20546, -20633, -20715, -20790, -20859, -20922, -20978, -21029, -21074, -21113, -21146, -21173,
    -21195, -21211, -21221, -21226, -21226, -21220, -21209, -21193, -21171, -21145, -21114, -21077, -21036, -20991,
    -20940, -20885, -20825, -20761, -20692, -20619, -20542, -20461, -20375, -20285, -20191, -20094, -19992, -19887,
    -19778, -19665, -19549, -19429, -19306, -19179, -19050, -18916, -18780, -18641, -18498, -18353, -18205, -18053,
    -17900, -17743, -17584, -17422, -17258, -17092, -16923, -16752, -16578, -16403, -16225, -16046, -15864, -15681,
    -15496, -15309, -15121, -14931, -14740, -14547, -14352, -14157, -13960, -13762, -13563, -13364, -13163, -12961,
    -12758, -12555, -12351, -12147, -11942, -11736, -11530, -11324, -11118, -10911, -10704, -10498, -10291, -10084,
    -9878, -9672, -9466, -9260, -9055, -8851, -8647, -8444, -8241, -8039, -7839, -7639, -7440, -7242, -7045, -6850,
    -6656, -6463, -6272, -6082, -5894, -5707, -5522, -5339, -5158, -4978, -4801, -4626, -4453, -4282, -4113, -3946,
    -3782, -3621, -3462, -3306, -3152, -3001, -2853, -2708, -2566, -2426, -2290, -2157, -2028, -1901, -1778, -1659,
    -1543, -1430, -1321, -1216, -1115, -1018, -924, -835, -750, -668, -591, -519, -450, -386, -327, -272, -222, -176,
    -136, -100, -69, -43, -22, -6, 5, 10, 10, 5, -6, -22};

const FIXP_WTB LowDelaySynthesis480[1440] = {
    -9517,  -9442,  -9367,  -9292,  -9216,  -9139,  -9063,  -8985,  -8908,  -8830,  -8751,  -8673,  -8594,  -8514,
    -8434,  -8354,  -8274,  -8193,  -8112,  -8030,  -7947,  -7865,  -7781,  -7698,  -7614,  -7529,  -7445,  -7361,
    -7276,  -7192,  -7106,  -7020,  -6934,  -6848,  -6761,  -6673,  -6586,  -6498,  -6410,  -6321,  -6233,  -6144,
    -6056,  -5967,  -5878,  -5790,  -5702,  -5613,  -5524,  -5436,  -5347,  -5257,  -5168,  -5078,  -4988,  -4899,
    -4809,  -4720,  -4631,  -4542,  -4454,  -4366,  -4278,  -4191,  -4104,  -4018,  -3932,  -3846,  -3760,  -3676,
    -3591,  -3507,  -3423,  -3339,  -3256,  -3174,  -3091,  -3009,  -2928,  -2847,  -2766,  -2686,  -2607,  -2529,
    -2451,  -2374,  -2299,  -2224,  -2150,  -2077,  -2005,  -1933,  -1863,  -1792,  -1722,  -1652,  -1583,  -1514,
    -1444,  -1375,  -1305,  -1235,  -1165,  -1095,  -1024,  -954,   -883,   -812,   -741,   -669,   -597,   -524,
    -451,   -378,   -307,   -239,   -176,   -118,   -72,    -17,    0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
    0,      0,      -16394, -16403, -16413, -16423, -16433, -16443, -16452, -16462, -16472, -16482, -16492, -16502,
    -16511, -16521, -16531, -16541, -16551, -16561, -16570, -16580, -16590, -16600, -16610, -16619, -16629, -16639,
    -16649, -16659, -16668, -16678, -16688, -16698, -16707, -16717, -16727, -16737, -16746, -16756, -16766, -16775,
    -16785, -16795, -16804, -16814, -16823, -16833, -16842, -16852, -16861, -16871, -16880, -16890, -16899, -16909,
    -16918, -16927, -16937, -16946, -16955, -16964, -16974, -16983, -16992, -17001, -17010, -17019, -17028, -17037,
    -17046, -17055, -17064, -17072, -17081, -17090, -17099, -17107, -17116, -17125, -17133, -17142, -17150, -17159,
    -17167, -17175, -17184, -17192, -17200, -17209, -17217, -17225, -17233, -17241, -17249, -17257, -17265, -17273,
    -17281, -17289, -17297, -17305, -17312, -17320, -17328, -17335, -17343, -17351, -17358, -17366, -17373, -17381,
    -17388, -17396, -17403, -17411, -17418, -17426, -17433, -17440, -17446, -17452, -17456, -17459, -17461, -17462,
    -17462, -17461, -17460, -17458, -17456, -17454, -17452, -17449, -17446, -17442, -17438, -17433, -17427, -17421,
    -17414, -17406, -17398, -17390, -17382, -17373, -17364, -17355, -17346, -17336, -17326, -17316, -17305, -17293,
    -17280, -17267, -17252, -17237, -17221, -17203, -17185, -17166, -17146, -17125, -17104, -17082, -17059, -17036,
    -17012, -16988, -16964, -16939, -16913, -16887, -16861, -16834, -16806, -16778, -16748, -16719, -16688, -16657,
    -16624, -16591, -16557, -16522, -16486, -16449, -16411, -16373, -16334, -16295, -16255, -16216, -16177, -16137,
    -16098, -16058, -16018, -15977, -15935, -15893, -15850, -15806, -15762, -15717, -15671, -15625, -15579, -15532,
    -15486, -15439, -15393, -15347, -15302, -15256, -15211, -15165, -15118, -15071, -15023, -14976, -14927, -14879,
    -14831, -14784, -14737, -14690, -14643, -14597, -14550, -14504, -14458, -14411, -14365, -14319, -14274, -14229,
    -14183, -14139, -14095, -14051, -19241, -19390, -19537, -19684, -19830, -19975, -20120, -20263, -20406, -20548,
    -20689, -20830, -20969, -21108, -21246, -21383, -21519, -21655, -21790, -21924, -22057, -22190, -22321, -22452,
    -22582, -22712, -22841, -22968, -23095, -23222, -23347, -23472, -23596, -23719, -23841, -23963, -24083, -24203,
    -24322, -24440, -24558, -24674, -24790, -24904, -25018, -25131, -25243, -25354, -25464, -25574, -25682, -25789,
    -25896, -26001, -26105, -26209, -26311, -26413, -26513, -26613, -26711, -26808, -26905, -27000, -27094, -27187,
    -27279, -27370, -27460, -27548, -27636, -27722, -27808, -27892, -27975, -28057, -28138, -28218, -28296, -28374,
    -28450, -28526, -28600, -28673, -28745, -28816, -28885, -28954, -29022, -29088, -29154, -29219, -29283, -29345,
    -29407, -29468, -29528, -29588, -29647, -29705, -29762, -29819, -29875, -29931, -29987, -30042, -30098, -30153,
    -30208, -30263, -30318, -30372, -30426, -30479, -30530, -30579, -30624, -30667, -30702, -30745, -30763, -30773,
    -30784, -30796, -30809, -30822, -30836, -30849, -30862, -30875, -30888, -30902, -30915, -30929, -30942, -30956,
    -30970, -30983, -30997, -31011, -31025, -31039, -31053, -31067, -31081, -31096, -31110, -31124, -31139, -31154,
    -31168, -31183, -31198, -31213, -31228, -31243, -31258, -31273, -31289, -31304, -31320, -31335, -31351, -31367,
    -31382, -31398, -31414, -31430, -31447, -31463, -31479, -31496, -31512, -31529, -31545, -31562, -31579, -31596,
    -31613, -31630, -31647, -31664, -31682, -31699, -31716, -31734, -31751, -31769, -31787, -31804, -31822, -31840,
    -31858, -31876, -31894, -31912, -31930, -31949, -31967, -31985, -32004, -32022, -32041, -32059, -32078, -32096,
    -32115, -32134, -32152, -32171, -32190, -32209, -32228, -32247, -32266, -32285, -32304, -32323, -32342, -32361,
    -32380, -32399, -32419, -32438, -32457, -32476, -32496, -32515, -32534, -32554, -32573, -32593, -32612, -32632,
    -32651, -32671, -32690, -32710, -32729, -32749, 2657,   2703,   2750,   2798,   2847,   2897,   2947,   2998,
    3050,   3102,   3155,   3208,   3261,   3315,   3370,   3425,   3481,   3537,   3594,   3651,   3709,   3767,
    3826,   3886,   3946,   4007,   4068,   4129,   4191,   4253,   4316,   4379,   4442,   4505,   4569,   4633,
    4697,   4761,   4826,   4891,   4955,   5020,   5084,   5147,   5209,   5271,   5332,   5392,   5451,   5508,
    5564,   5619,   5671,   5723,   5772,   5820,   5865,   5909,   5950,   5990,   6029,   6067,   6108,   6150,
    6195,   6241,   6291,   6342,   6396,   6452,   6510,   6570,   6632,   6697,   6763,   6831,   6901,   6973,
    7047,   7123,   7201,   7280,   7361,   7444,   7529,   7615,   7703,   7794,   7886,   7981,   8078,   8177,
    8278,   8381,   8486,   8592,   8699,   8807,   8915,   9024,   9133,   9244,   9356,   9470,   9587,   9705,
    9825,   9947,   10069,  10192,  10316,  10439,  10563,  10688,  10814,  10942,  11072,  11205,  11340,  11479,
    11620,  11764,  11908,  12054,  12199,  12344,  12488,  12629,  12770,  12910,  13050,  13190,  13332,  13477,
    13626,  13779,  13936,  14096,  14259,  14424,  14589,  14753,  14916,  15077,  15234,  15389,  15540,  15690,
    15838,  15985,  16132,  16281,  16430,  16582,  16735,  16891,  17049,  17208,  17369,  17532,  17696,  17860,
    18024,  18188,  18352,  18514,  18675,  18834,  18991,  19147,  19301,  19454,  19605,  19755,  19905,  20053,
    20201,  20349,  20497,  20645,  20793,  20942,  21091,  21241,  21391,  21541,  21692,  21844,  21994,  22143,
    22291,  22435,  22577,  22717,  22853,  22987,  23120,  23252,  23384,  23516,  23648,  23780,  23913,  24045,
    24177,  24309,  24440,  24569,  24698,  24824,  24948,  25070,  25189,  25306,  25421,  25534,  25648,  25762,
    25876,  25990,  26103,  26216,  26327,  26437,  26544,  26650,  26754,  26856,  26958,  27058,  27157,  27256,
    27353,  27450,  27545,  27639,  27732,  27824,  27914,  28004,  -20947, -20654, -20363, -20075, -19790, -19507,
    -19227, -18949, -18673, -18399, -18126, -17855, -17586, -17319, -17053, -16790, -16528, -16268, -16010, -15754,
    -15500, -15248, -14998, -14750, -14504, -14260, -14019, -13779, -13541, -13305, -13072, -12841, -12611, -12384,
    -12159, -11936, -11715, -11496, -11279, -11065, -10852, -10642, -10433, -10227, -10023, -9821,  -9621,  -9424,
    -9228,  -9034,  -8843,  -8653,  -8466,  -8281,  -8098,  -7916,  -7737,  -7560,  -7385,  -7213,  -7042,  -6873,
    -6706,  -6541,  -6379,  -6218,  -6059,  -5902,  -5748,  -5595,  -5444,  -5295,  -5149,  -5004,  -4861,  -4720,
    -4581,  -4444,  -4309,  -4176,  -4045,  -3916,  -3788,  -3663,  -3539,  -3417,  -3296,  -3178,  -3061,  -2945,
    -2832,  -2720,  -2610,  -2503,  -2397,  -2293,  -2192,  -2092,  -1994,  -1899,  -1804,  -1712,  -1621,  -1532,
    -1444,  -1358,  -1274,  -1191,  -1111,  -1032,  -954,   -878,   -804,   -731,   -660,   -590,   -523,   -457,
    -393,   -331,   -271,   -212,   -154,   -98,    -42,    13,     68,     122,    174,    226,    276,    323,
    368,    411,    450,    486,    521,    553,    584,    613,    643,    672,    702,    732,    762,    793,
    823,    853,    881,    908,    933,    957,    978,    997,    1014,   1029,   1042,   1053,   1063,   1072,
    1080,   1087,   1094,   1100,   1105,   1111,   1116,   1122,   1127,   1132,   1136,   1140,   1143,   1146,
    1147,   1148,   1148,   1146,   1143,   1139,   1134,   1127,   1120,   1111,   1102,   1092,   1081,   1070,
    1059,   1048,   1036,   1025,   1014,   1002,   990,    977,    963,    949,    934,    918,    901,    884,
    865,    847,    828,    808,    789,    769,    749,    729,    708,    688,    667,    646,    624,    602,
    579,    556,    533,    509,    485,    461,    437,    412,    387,    362,    337,    312,    287,    261,
    236,    210,    184,    158,    132,    106,    79,     53,     27,     1,      -10723, -10835, -10947, -11057,
    -11167, -11276, -11385, -11492, -11599, -11705, -11811, -11916, -12020, -12122, -12224, -12325, -12425, -12525,
    -12624, -12722, -12819, -12914, -13009, -13103, -13196, -13290, -13382, -13475, -13567, -13659, -13752, -13845,
    -13938, -14032, -14126, -14220, -14313, -14407, -14503, -14600, -14700, -14802, -14909, -15019, -15133, -15253,
    -15378, -15508, -15645, -15789, -15940, -16099, -16266, -16442, -16626, -16820, -17022, -17235, -17456, -17683,
    -17911, -18135, -18350, -18557, -18756, -18946, -19128, -19301, -19467, -19624, -19774, -19915, -20049, -20175,
    -20294, -20405, -20509, -20605, -20694, -20775, -20850, -20918, -20978, -21032, -21079, -21120, -21154, -21181,
    -21202, -21216, -21224, -21226, -21222, -21212, -21196, -21175, -21147, -21114, -21075, -21031, -20981, -20926,
    -20865, -20800, -20729, -20654, -20573, -20488, -20398, -20303, -20204, -20100, -19992, -19880, -19763, -19642,
    -19517, -19389, -19256, -19119, -18979, -18835, -18688, -18537, -18382, -18225, -18064, -17900, -17733, -17563,
    -17390, -17214, -17036, -16854, -16671, -16485, -16296, -16106, -15913, -15718, -15521, -15322, -15121, -14918,
    -14714, -14508, -14300, -14092, -13881, -13670, -13457, -13243, -13028, -12812, -12596, -12378, -12160, -11942,
    -11722, -11503, -11283, -11062, -10842, -10622, -10401, -10181, -9960,  -9740,  -9521,  -9301,  -9083,  -8864,
    -8647,  -8430,  -8214,  -7999,  -7785,  -7572,  -7361,  -7150,  -6941,  -6733,  -6527,  -6323,  -6120,  -5919,
    -5720,  -5522,  -5327,  -5134,  -4943,  -4754,  -4568,  -4384,  -4203,  -4024,  -3848,  -3675,  -3504,  -3337,
    -3172,  -3011,  -2853,  -2698,  -2547,  -2399,  -2254,  -2114,  -1977,  -1843,  -1714,  -1589,  -1467,  -1350,
    -1237,  -1128,  -1024,  -924,   -829,   -739,   -653,   -572,   -495,   -424,   -358,   -297,   -241,   -191,
    -146,   -107,   -73,    -44,    -22,    -5,     6,      10,     9,      2,      -12,    -32};
/*
 * TNS_MAX_BANDS
 * entry for each sampling rate
 *  1  int32_t window
 *  2  int16_t window
 */
const uint8_t tns_max_bands_tbl[13][2] = {
    {31, 9},  /* 96000 */
    {31, 9},  /* 88200 */
    {34, 10}, /* 64000 */
    {40, 14}, /* 48000 */
    {42, 14}, /* 44100 */
    {51, 14}, /* 32000 */
    {46, 14}, /* 24000 */
    {46, 14}, /* 22050 */
    {42, 14}, /* 16000 */
    {42, 14}, /* 12000 */
    {42, 14}, /* 11025 */
    {39, 14}, /*  8000 */
    {39, 14}, /*  7350 */
};

/* TNS_MAX_BANDS for low delay. The array index is the sampleRateIndex */
const uint8_t tns_max_bands_tbl_480[13] = {
    31, /* 96000 */
    31, /* 88200 */
    31, /* 64000 */
    31, /* 48000 */
    32, /* 44100 */
    37, /* 32000 */
    30, /* 24000 */
    30, /* 22050 */
    30, /* 16000 */
    30, /* 12000 */
    30, /* 11025 */
    30, /*  8000 */
    30  /*  7350 */
};
const uint8_t tns_max_bands_tbl_512[13] = {
    31, /* 96000 */
    31, /* 88200 */
    31, /* 64000 */
    31, /* 48000 */
    32, /* 44100 */
    37, /* 32000 */
    31, /* 24000 */
    31, /* 22050 */
    31, /* 16000 */
    31, /* 12000 */
    31, /* 11025 */
    31, /*  8000 */
    31  /*  7350 */
};

#define TCC(x) (int32_t(x))

const FIXP_TCC FDKaacDec_tnsCoeff3[8] = {TCC(0x81f1d1d4), TCC(0x9126146c), TCC(0xadb922c4), TCC(0xd438af1f),
                                         TCC(0x00000000), TCC(0x3789809b), TCC(0x64130dd4), TCC(0x7cca7016)};
const FIXP_TCC FDKaacDec_tnsCoeff4[16] = {TCC(0x808bc842), TCC(0x84e2e58c), TCC(0x8d6b49d1), TCC(0x99da920a),
                                          TCC(0xa9c45713), TCC(0xbc9ddeb9), TCC(0xd1c2d51b), TCC(0xe87ae53d),
                                          TCC(0x00000000), TCC(0x1a9cd9b6), TCC(0x340ff254), TCC(0x4b3c8c29),
                                          TCC(0x5f1f5ebb), TCC(0x6ed9ebba), TCC(0x79bc385f), TCC(0x7f4c7e5b)};

const uint8_t FDKaacDec_tnsCoeff3_gain_ld[] = {
    3, 1, 1, 1, 0, 1, 1, 3,
};
const uint8_t FDKaacDec_tnsCoeff4_gain_ld[] = {
    4, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 2, 4,
};

/* Lookup tables for elements in ER bitstream */
const MP4_ELEMENT_ID elementsTab[AACDEC_MAX_CH_CONF][AACDEC_CH_ELEMENTS_TAB_SIZE] = {
    /*  1 */ {ID_SCE, ID_EXT, ID_END, ID_NONE, ID_NONE, ID_NONE, ID_NONE}, /* 1 channel  */
                                                                           /*  2 */
    {ID_CPE, ID_EXT, ID_END, ID_NONE, ID_NONE, ID_NONE, ID_NONE}           /* 2 channels */
#if(AACDEC_MAX_CH_CONF > 2)
    /*  3 */,
    {ID_SCE, ID_CPE, ID_EXT, ID_END, ID_NONE, ID_NONE, ID_NONE}, /* 3 channels */
                                                                 /*  4 */
    {ID_SCE, ID_CPE, ID_SCE, ID_EXT, ID_END, ID_NONE, ID_NONE},  /* 4 channels */
                                                                 /*  5 */
    {ID_SCE, ID_CPE, ID_CPE, ID_EXT, ID_END, ID_NONE, ID_NONE},  /* 5 channels */
                                                                 /*  6 */
    {ID_SCE, ID_CPE, ID_CPE, ID_LFE, ID_EXT, ID_END, ID_NONE}    /* 6 channels */
#endif
#if(AACDEC_MAX_CH_CONF > 6)
    /*  7 */,
    {ID_SCE, ID_CPE, ID_CPE, ID_CPE, ID_LFE, ID_EXT, ID_END},        /* 8 channels */
                                                                     /*  8 */
    {ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE}, /* reserved   */
                                                                     /*  9 */
    {ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE}, /* reserved   */
                                                                     /* 10 */
    {ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE}, /* reserved   */
                                                                     /* 11 */
    {ID_SCE, ID_CPE, ID_CPE, ID_SCE, ID_LFE, ID_EXT, ID_END},        /* 7 channels */
                                                                     /* 12 */
    {ID_SCE, ID_CPE, ID_CPE, ID_CPE, ID_LFE, ID_EXT, ID_END},        /* 8 channels */
                                                                     /* 13 */
    {ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE, ID_NONE}, /* see elementsChCfg13 */
                                                                     /* 14 */
    {ID_SCE, ID_CPE, ID_CPE, ID_LFE, ID_CPE, ID_EXT, ID_END}         /* 8 channels */
#endif
};

/*! Random sign bit used for concealment
 */
const uint16_t AacDec_randomSign[AAC_NF_NO_RANDOM_VAL / 16] = {
    /*
       sign bits of FDK_sbrDecoder_sbr_randomPhase[] entries:
       LSB ........... MSB  ->    MSB ... LSB
    */
    /* 1001 0111 0011 1100  -> */ 0x3ce9,
    /* 0100 0111 0111 1011  -> */ 0xdee2,
    /* 0001 1100 1110 1011  -> */ 0xd738,
    /* 0001 0011 0110 1001  -> */ 0x96c8,
    /* 0101 0011 1101 0000  -> */ 0x0bca,
    /* 0001 0001 1111 0100  -> */ 0x2f88,
    /* 1110 1100 1110 1101  -> */ 0xb737,
    /* 0010 1010 1011 1001  -> */ 0x9d54,
    /* 0111 1100 0110 1010  -> */ 0x563e,
    /* 1101 0111 0010 0101  -> */ 0xa4eb,
    /* 0001 0101 1011 1100  -> */ 0x3da8,
    /* 0101 0111 1001 1011  -> */ 0xd9ea,
    /* 1101 0100 0101 0101  -> */ 0xaa2b,
    /* 1000 1001 0100 0011  -> */ 0xc291,
    /* 1100 1111 1010 1100  -> */ 0x35f3,
    /* 1100 1010 1110 0010  -> */ 0x4753,
    /* 0110 0001 1010 1000  -> */ 0x1586,
    /* 0011 0101 1111 1100  -> */ 0x3fac,
    /* 0001 0110 1010 0001  -> */ 0x8568,
    /* 0010 1101 0111 0010  -> */ 0x4eb4,
    /* 1101 1010 0100 1001  -> */ 0x925b,
    /* 1100 1001 0000 1110  -> */ 0x7093,
    /* 1000 1100 0110 1010  -> */ 0x5631,
    /* 0000 1000 0110 1101  -> */ 0xb610,
    /* 1000 0001 1111 1011  -> */ 0xdf81,
    /* 1111 0011 0100 0111  -> */ 0xe2cf,
    /* 1000 0001 0010 1010  -> */ 0x5481,
    /* 1101 0101 1100 1111  -> */ 0xf3ab,
    /* 0110 0001 0110 1000  -> */ 0x1686,
    /* 0011 0011 1100 0110  -> */ 0x63cc,
    /* 0011 0111 0101 0110  -> */ 0x6aec,
    /* 1011 0001 1010 0010  -> */ 0x458d};

/* MDST filter coefficients for current window
 * max: 0.635722 => 20 bits (unsigned) necessary for representation
 * min: = -max */
const FIXP_FILT mdst_filt_coef_curr[20][3] = {
    {FILT(0.000000f), FILT(0.000000f), FILT(0.500000f)},
    /*, FILT( 0.000000f), FILT(-0.500000f), FILT( 0.000000f), FILT( 0.000000f) }, */ /* only int32_t / eight int16_t
                                                                                        l:sine r:sine */
    {FILT(0.091497f), FILT(0.000000f), FILT(0.581427f)},
    /*, FILT( 0.000000f), FILT(-0.581427f), FILT( 0.000000f), FILT(-0.091497f) }, */ /*                          l:kbd
                                                                                        r:kbd  */
    {FILT(0.045748f), FILT(0.057238f), FILT(0.540714f)},
    /*, FILT( 0.000000f), FILT(-0.540714f), FILT(-0.057238f), FILT(-0.045748f) }, */ /*                          l:sine
                                                                                        r:kbd  */
    {FILT(0.045748f), FILT(-0.057238f), FILT(0.540714f)},
    /*, FILT( 0.000000f), FILT(-0.540714f), FILT( 0.057238f), FILT(-0.045748f) }, */ /*                          l:kbd
                                                                                        r:sine */

    {FILT(0.102658f), FILT(0.103791f), FILT(0.567149f)},
    /*, FILT( 0.000000f), FILT(-0.567149f), FILT(-0.103791f), FILT(-0.102658f) }, */ /* int32_t start */
    {FILT(0.150512f), FILT(0.047969f), FILT(0.608574f)}, /*, FILT( 0.000000f), FILT(-0.608574f),
                                                            FILT(-0.047969f), FILT(-0.150512f) }, */
    {FILT(0.104763f), FILT(0.105207f), FILT(0.567861f)}, /*, FILT( 0.000000f), FILT(-0.567861f),
                                                            FILT(-0.105207f), FILT(-0.104763f) }, */
    {FILT(0.148406f), FILT(0.046553f), FILT(0.607863f)}, /*, FILT( 0.000000f), FILT(-0.607863f),
                                                            FILT(-0.046553f), FILT(-0.148406f) }, */

    {FILT(0.102658f), FILT(-0.103791f), FILT(0.567149f)},
    /*, FILT( 0.000000f), FILT(-0.567149f), FILT( 0.103791f), FILT(-0.102658f) }, */ /* int32_t stop */
    {FILT(0.150512f), FILT(-0.047969f), FILT(0.608574f)}, /*, FILT( 0.000000f), FILT(-0.608574f), FILT(
                                                             0.047969f), FILT(-0.150512f) }, */
    {FILT(0.148406f), FILT(-0.046553f), FILT(0.607863f)}, /*, FILT( 0.000000f), FILT(-0.607863f), FILT(
                                                             0.046553f), FILT(-0.148406f) }, */
    {FILT(0.104763f), FILT(-0.105207f), FILT(0.567861f)}, /*, FILT( 0.000000f), FILT(-0.567861f), FILT(
                                                             0.105207f), FILT(-0.104763f) }, */

    {FILT(0.205316f), FILT(0.000000f), FILT(0.634298f)},
    /*, FILT( 0.000000f), FILT(-0.634298f), FILT( 0.000000f), FILT(-0.205316f) }, */ /* stop start */
    {FILT(0.209526f), FILT(0.000000f), FILT(0.635722f)},  /*, FILT( 0.000000f), FILT(-0.635722f), FILT(
                                                             0.000000f), FILT(-0.209526f) }, */
    {FILT(0.207421f), FILT(0.001416f), FILT(0.635010f)},  /*, FILT( 0.000000f), FILT(-0.635010f),
                                                             FILT(-0.001416f), FILT(-0.207421f) }, */
    {FILT(0.207421f), FILT(-0.001416f), FILT(0.635010f)}, /*, FILT( 0.000000f), FILT(-0.635010f), FILT(
                                                             0.001416f), FILT(-0.207421f) }  */

    {FILT(0.185618f), FILT(0.000000f), FILT(0.627371f)},
    /*, FILT( 0.000000f), FILT(-0.634298f), FILT( 0.000000f), FILT(-0.205316f) }, */ /* stop start   Transform Splitting
                                                                                      */
    {FILT(0.204932f), FILT(0.000000f), FILT(0.634159f)},  /*, FILT( 0.000000f), FILT(-0.635722f), FILT(
                                                             0.000000f), FILT(-0.209526f) }, */
    {FILT(0.194609f), FILT(0.006202f), FILT(0.630536f)},  /*, FILT( 0.000000f), FILT(-0.635010f),
                                                             FILT(-0.001416f), FILT(-0.207421f) }, */
    {FILT(0.194609f), FILT(-0.006202f), FILT(0.630536f)}, /*, FILT( 0.000000f), FILT(-0.635010f), FILT(
                                                             0.001416f), FILT(-0.207421f) }  */
};

/* MDST filter coefficients for previous window
 * max: 0.31831 => 15 bits (unsigned) necessary for representation
 * min: 0.0 */
const FIXP_FILT mdst_filt_coef_prev[6][4] = {
    {FILT(0.000000f), FILT(0.106103f), FILT(0.250000f), FILT(0.318310f)},
    /*, FILT( 0.250000f), FILT( 0.106103f), FILT( 0.000000f) }, */ /* only int32_t
                                                                      / int32_t
                                                                      start /
                                                                      eight
                                                                      int16_t
                                                                      l:sine */
    {FILT(0.059509f), FILT(0.123714f), FILT(0.186579f), FILT(0.213077f)},
    /*, FILT( 0.186579f), FILT( 0.123714f), FILT( 0.059509f) }, */ /*                                       l:kbd
                                                                    */

    {FILT(0.038498f), FILT(0.039212f), FILT(0.039645f), FILT(0.039790f)},
    /*, FILT( 0.039645f), FILT( 0.039212f), FILT( 0.038498f) }, */ /* int32_t stop
                                                                      / stop
                                                                      start
                                                                      l:sine */
    {FILT(0.026142f), FILT(0.026413f), FILT(0.026577f), FILT(0.026631f)},
    /*, FILT( 0.026577f), FILT( 0.026413f), FILT( 0.026142f) }  */ /*                         l:kbd
                                                                    */

    {FILT(0.069608f), FILT(0.075028f), FILT(0.078423f), FILT(0.079580f)},
    /*, FILT( 0.039645f), FILT( 0.039212f), FILT( 0.038498f) }, */ /* Transform
                                                                      splitting
                                                                      l:sine */
    {FILT(0.042172f), FILT(0.043458f), FILT(0.044248f), FILT(0.044514f)},
    /*, FILT( 0.026577f), FILT( 0.026413f), FILT( 0.026142f) }  */ /*                         l:kbd
                                                                    */
};
